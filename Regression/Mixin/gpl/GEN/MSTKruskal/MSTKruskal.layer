// Graph Algorithms Product Line (GPL)
// University of Texas at Austin
// Department of Computer Sciences
// Product-Line Architectures Research Group
// Edge-Neighbor Representation
// MSTKRUSKAL : minimum spanning tree layer
// Last Update: May 15, 2001
// Written by: Roberto E. Lopez-Herrejon (rlopez@cs.utexas.edu)
// KRUSKAL algorithm, Cormen's textbook 24.2

layer MSTKruskal(GEN lower)
realm GEN
extends lower
imports java.lang.Integer,
        java.util.LinkedList ,
        java.util.Collections,
        java.util.Comparator
{
	
   // *************************************************************************
   public static class Graph extends lower.Graph {
		  	
      public $TEqn.Graph Kruskal() {
      
	// 1. A <- Empty set
	LinkedList A = new LinkedList();
		
	// 2. for each vertex v E V[G]
	// 3.    do Make-Set(v)
	int numvertices = vertices.size();
	int i;
	$TEqn.Vertex v;
		
	for (i=0; i < numvertices; i++)
	{
	  v = ($TEqn.Vertex)vertices.get(i);
	  v.representative = v;		// I am in my set
	  v.members = new LinkedList();	// I have no members in my set
	}
		
	// 4. sort the edges of E by nondecreasing weight w	
	// Creates the edges objects
	int j;
	LinkedList Vneighbors = new LinkedList();
	$TEqn.Vertex u;
		
	// Sort the Edges in non decreasing order
        Collections.sort(edges, 
	  new Comparator()
	   {
	     public int compare (Object o1, Object o2)
	     { 
		$TEqn.Edge e1 = ($TEqn.Edge)o1;
		$TEqn.Edge e2 = ($TEqn.Edge)o2;
	        if (e1.weight < e2.weight)
		  return -1;
		if (e1.weight == e2.weight)
  		  return 0;
		return 1;	   		 
	      }
 	 });		
        
	// 5. for each edge in the nondecresing order
	int numedges = edges.size();
	$TEqn.Edge e1;
	$TEqn.Vertex vaux, urep, vrep;
		
	for(i=0; i<numedges; i++)
	{
	  // 6. if Find-Set(u)!=Find-Set(v)
	  e1 = ($TEqn.Edge)edges.get(i);
	  u = e1.start;
	  v = e1.end;

	  if (!(v.representative.name).equals(u.representative.name))
	  {
	    // 7. A <- A U {(u,v)}
	    A.add(e1);
				
	    // 8. Union(u,v)
  	    urep = u.representative;
	    vrep = v.representative;
	 			
	    if ((urep.members).size() > (vrep.members).size())
	    { // we add elements of v to u
	      for(j=0; j<(vrep.members).size(); j++)
	      {
		vaux = ($TEqn.Vertex)(vrep.members).get(j);
		vaux.representative = urep;
		(urep.members).add(vaux);
	      }
	      v.representative = urep;
	      vrep.representative = urep;
	      (urep.members).add(v);
	      if (!v.equals(vrep)) (urep.members).add(vrep);
			(vrep.members).clear();
	     }
	     else
	     { // we add elements of u to v
	       for(j=0; j<(urep.members).size(); j++)
	       {
		 vaux = ($TEqn.Vertex)(urep.members).get(j);
		 vaux.representative = vrep;
		 (vrep.members).add(vaux);
	       }
	       u.representative = vrep;
	       urep.representative = vrep;
	       (vrep.members).add(u);
	       if (!u.equals(urep)) (vrep.members).add(urep);
		 (urep.members).clear();
					
	      } // else
				
  	  } // of if
			
       } // of for numedges
		
      // 9. return A
      // Creates the new Graph that contains the SSSP
      String theName;
      $TEqn.Graph newGraph = new $TEqn.Graph();
		
      // Creates and adds the vertices with the same name
      for (i=0; i<numvertices; i++)
      {
         theName = (($TEqn.Vertex)vertices.get(i)).name;			
         newGraph.addVertex(new $TEqn.Vertex().assignName(theName));
      }
        
       // Creates the edges from the NewGraph
       $TEqn.Vertex theStart, theEnd;
       $TEqn.Vertex theNewStart, theNewEnd;
       $TEqn.Edge   theEdge;
       
       // For each edge in A we find its two vertices
       // make an edge for the new graph from with the correspoding
       // new two vertices
       for(i=0; i<A.size(); i++)
       {   
         // theEdge with its two vertices
         theEdge = ($TEqn.Edge)A.get(i);
         theStart = theEdge.start;
         theEnd = theEdge.end;
         
         // Find the references in the new Graph
         theNewStart = newGraph.findsVertex(theStart.name);
         theNewEnd = newGraph.findsVertex(theEnd.name);
         
         // Creates the new edge with new start and end vertices in the newGraph
         // and ajusts the adorns based on the old edge
         $TEqn.Edge theNewEdge = new $TEqn.Edge(theNewStart, theNewEnd);
         theNewEdge.adjustAdorns(theEdge);
         
         // Adds the new edge to the newGraph
         newGraph.addEdge(theNewEdge);
       }          
        return newGraph;	
        
      } // kruskal 
           
   } // of Graph

   // *************************************************************************
   public static class Vertex extends lower.Vertex {      
	  public $TEqn.Vertex representative;
	  public LinkedList members;
	  
      public void display() {
         if (representative == null)
           System.out.print("Rep null "); 
		 else	
		   System.out.print(" Rep " + representative.name + " ");
         super.display();
      }
   } // of vertex
   
} // of layer
