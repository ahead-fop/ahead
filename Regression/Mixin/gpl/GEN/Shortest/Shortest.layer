// Graph Algorithms Product Line (GPL)
// University of Texas at Austin
// Department of Computer Sciences
// Product-Line Architectures Research Group
// Edge-Neighbor Representation
// SHORTEST : single source shortes path layer
// Last Update: May 15, 2001
// Written by: Roberto E. Lopez-Herrejon (rlopez@cs.utexas.edu)
// Dijkstra's Algorithm, Cormen's textbook 25.2
   
layer Shortest(GEN lower)
realm GEN
extends lower
imports java.lang.Integer,
	java.util.LinkedList,
	java.util.Collections,
        java.util.Comparator
{
 
// *********************************************************************************
   public static class Graph extends lower.Graph {

      public $TEqn.Graph ShortestPath($TEqn.Vertex s) {
	$TEqn.Vertex source;
		
	source = s;
	int numvertices = vertices.size();
	int i;
	$TEqn.Vertex x,n;
	$TEqn.Neighbor vn;
	int wuvn;
	int k1;
					
	// 1. Initializes the single source
	for (i=0; i < numvertices; i++)
	{
	  x = ($TEqn.Vertex)vertices.get(i);		
	  x.predecessor = null;
	  x.dweight = Integer.MAX_VALUE;
	}
			
	source.dweight = 0;
	source.predecessor = null;
				
	// 2. S <- empty set
	LinkedList S = new LinkedList();
		
	// 3. Queue <- V[G], copy the vertex in the graph in the priority queue
	LinkedList Queue = new LinkedList();
	for(i=0; i < numvertices; i++)
	{
	  x = ($TEqn.Vertex)vertices.get(i);
	  if (x.dweight != 0) // this means, if this is not the source
	   	Queue.add(x);						
	}
		
	// Inserts the source at the head of the queue
	Queue.addFirst(source);
		

	// 4. while Q!=0
	$TEqn.Vertex ucurrent;
	int j,k,l;
	int pos;
	LinkedList Uneighbors;
	$TEqn.Vertex u,v;
	$TEqn.Edge en;
	int wuv;
		
	while (Queue.size()!=0)
	{
	  // 5. u <- Extract-Min(Q);
	  u = ($TEqn.Vertex)Queue.removeFirst();
			
	  // 6. S <- S U {u} 
	  S.add(u);
						
	  // 7. for each vertex v adjacent to u
	  Uneighbors = u.neighbors;

  	  // For all the neighbors
	  for(k=0; k < Uneighbors.size(); k++)
	  {
	    vn = ($TEqn.Neighbor)Uneighbors.get(k);
	    v = vn.end; 
	    en = vn.edge;
	    wuv = en.weight;
  
  	    // 8. Relax (u,v w)
	    if (v.dweight > (u.dweight +  wuv))
	     {
		v.dweight = u.dweight +  wuv;
		v.predecessor = u.name;
		Uneighbors.set(k,vn); // adjust values in the neighbors
					
		// update the values of v in the queue
		int indexNeighbor = Queue.indexOf(v);
		if (indexNeighbor>=0) 
		{
		 Object residue = Queue.remove(indexNeighbor);
			
		 // Get the new position for v
		 int position = Collections.binarySearch(Queue,v, 
		   new Comparator()
		    {
			public int compare (Object o1, Object o2)
			{ 
			  $TEqn.Vertex v1 = ($TEqn.Vertex)o1;
			  $TEqn.Vertex v2 = ($TEqn.Vertex)o2; 
                                
			  if (v1.dweight < v2.dweight)
				return -1;

			  if (v1.dweight == v2.dweight)
				return 0;
			  return 1;	   		 
 			 }
		    });	
					        
		 // Adds v in its new position in Queue					  
		 if (position < 0)  // means it is not there
		  { Queue.add(-(position+1),v); }
		 else      // means it is there
		  { Queue.add(position,v); } 	
							
		} // if it is in the Queue
				
		} // if 8.
	    } // for
	} // of while		         
		         
      // Creates the new Graph that contains the SSSP
      String theName;
      $TEqn.Graph newGraph = new $TEqn.Graph();
		
      // Creates and adds the vertices with the same name
      for (i=0; i<numvertices; i++)
      {
	 theName = (($TEqn.Vertex)vertices.get(i)).name;			
         newGraph.addVertex(new $TEqn.Vertex().assignName(theName));
       }
        
       // Creates the edges from the NewGraph
       $TEqn.Vertex theVertex, thePred;
       $TEqn.Vertex theNewVertex, theNewPred;    
       $TEqn.Edge   e;
       $TEqn.Neighbor theNeighbor,newNeighbor;
       boolean flag = false;

       
       // For each vertex in vertices list we find its predecessor
       // make an edge for the new graph from predecessor->vertex
       for(i=0; i<numvertices; i++)
       {
         // theVertex and its Predecessor
         theVertex = ($TEqn.Vertex)vertices.get(i);
         thePred = findsVertex(theVertex.predecessor);
         
         // if theVertex is the source then continue we dont need
         // to create a new edge at all
         if (thePred==null) continue;
         
         // Find the references in the new Graph
         theNewVertex = newGraph.findsVertex(theVertex.name);
         theNewPred = newGraph.findsVertex(thePred.name);
 
          // theNeighbor corresponds to the neighbor formed with
          // theVertex -> thePred
          // find the corresponding neighbor of the Vertex, that is,
          // predecessor
          j=0; flag=false;
          do
          {
             theNeighbor = ($TEqn.Neighbor)(thePred.neighbors).get(j);
             if (theNeighbor.end.name.equals(theVertex.name))
              flag = true;
             else
               j++;
          }while(flag==false && j< thePred.neighbors.size());
        
         // Creates the new edge from predecessor -> vertex in the newGraph
         // and ajusts the adorns based on the old edge
         $TEqn.Edge theNewEdge = new $TEqn.Edge(theNewPred, theNewVertex);
         e = theNeighbor.edge;
         theNewEdge.adjustAdorns(e);
         
         // Adds the new edge to the newGraph
         newGraph.addEdge(theNewEdge);
       }
          
        return newGraph;
         
      } // shortest path      
   } // of Graph

// *********************************************************************************
   public static class Vertex extends lower.Vertex {      
	  public String predecessor;  // the name of the predecessor if any
	  public int dweight;         // weight so far from s to it
	  
      public void display() {
         System.out.print(" Pred " + predecessor + " DWeight " + dweight + " ");
         super.display();
      }
      
   } // of vertex
   
} // of layer
