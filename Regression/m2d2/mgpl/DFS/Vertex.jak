layer DFS;

// end of Graph
      
  // *************************************************************************
   
public refines class Vertex {
    public boolean visited;
   
    // public Vertex() {
    //   visited = false;
    // }

    public void VertexConstructor() {
        Super().VertexConstructor();
        visited = false;
    }
 
    public void init_vertex( WorkSpace w ) {
        visited = false;
        w.init_vertex( ( Vertex ) this );
    }
   
    public void dftNodeSearch( WorkSpace w ) {
        int           s, c;
        Vertex v;
        Neighbor n;

        // Step 1: Do preVisitAction. 
        //            If we've already visited this node return

        w.preVisitAction( ( Vertex ) this );
         
        if ( visited )
            return;

        // Step 2: else remember that we've visited and 
        //         visit all neighbors

        visited = true;
         
        s = neighbors.size();
        for ( c = 0; c < s; c++ ) 
                {
            n = ( Neighbor ) neighbors.get( c );
            v = n.end;
            w.checkNeighborAction( ( Vertex ) this, v );
            v.dftNodeSearch( w );
        }
        ;
     
        // Step 3: do postVisitAction now
        w.postVisitAction( ( Vertex ) this );
    } // of dftNodeSearch

    public void display() {
        if ( visited )
            System.out.print( "  visited" );
        else
            System.out.println( " !visited" );
        Super().display();
    }
      
}
