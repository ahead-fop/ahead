package b2;

class  sm {
               static int stateNumGenerator = 0;
   final static int start = stateNumGenerator++; 
   final static int stop = stateNumGenerator++; 
   final static int a = stateNumGenerator++;
            protected interface disp {
                void exit(  Event e );
            }
            protected int current_state = start;
            protected disp dispatch = new disp() {
                public void exit(  Event e ) {
                    start_exit( e );
                }
            };

   // methods for state a

   void a_branches(  Event e ) {
      if (starBranches( e ) ) a_otherwise( e );
   }
   void a_enter(  Event e ) {
      current_state = a;
      dispatch = new disp() { public void exit(  Event e ) { a_exit( e ); } };

      a_enter_user(e);
    }
   void a_enter_user(  Event e ) { 
         a_enter_user$$sm1( e );
        enterRef();
   }
   final void a_enter_user$$sm0(  Event e ) {; }
   final void a_enter_user$$sm1(  Event e ) {
        enterBase();a_enter_user$$sm0( e); }
   void a_exit(  Event e ) { ; }
   void a_otherwise( Event e) { otherwise_Default(e);}
   void a_prepare(  Event e ) { ; }
            final public boolean atStop() {
                return current_state == stop;
            }
      // delivery method

   public void delivery(  Event e ) {      
      if (current_state == start) { start_prepare(e); start_branches(e); return; }
      if (current_state == stop) { stop_prepare(e); stop_branches(e); return; }
      if (current_state == a) { a_prepare(e); a_branches(e); return; }
      
        System.err.println( "Unrecognizable_state" + current_state );
        System.exit( 1 );
   }

   // getState method

   public String getState() {
      if (current_state == start) return "start";
      if (current_state == stop) return "stop";
      if (current_state == a) return "a";
      return "Unrecognizable_State";
   }
   // otherwise_Default method
   void otherwise_Default( Event e) { ; }
   boolean starBranches(  Event e ) { 
       return true; }

   // methods for state start

   void start_branches(  Event e ) {
      if (starBranches( e ) ) start_otherwise( e );
   }
   void start_enter(  Event e ) {
      current_state = start;
      dispatch = new disp() { public void exit(  Event e ) { start_exit( e ); } };

      start_enter_user(e);
    }
   void start_enter_user(  Event e ) { ;
   }
   void start_exit(  Event e ) { ; } 
   void start_otherwise( Event e) { otherwise_Default(e);}
   void start_prepare(  Event e ) { ; }

   // methods for state stop

   void stop_branches(  Event e ) {
      if (starBranches( e ) ) stop_otherwise( e );
   }
   void stop_enter(  Event e ) {
      current_state = stop;
      dispatch = new disp() { public void exit(  Event e ) { stop_exit( e ); } };

      stop_enter_user(e);
    }
   void stop_enter_user(  Event e ) { ;
   }
   void stop_exit(  Event e ) { ; }
   void stop_otherwise( Event e) { otherwise_Default(e);}
   void stop_prepare(  Event e ) { ; }
        }
