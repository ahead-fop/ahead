layer FS;

import laydown.OpfacDataWrapper;

import log.Log;

import java.util.*;

import fsats.util.*;

import laydown.*;

/** Extend Factory to produce opfacs. */
public class OpfacFactory {
    private Map prototypes = new HashMap();
    protected OpfacFactory() 
        { { { {
                    register( OpfacType.DIV_FSE_TAC, new DivFseOpfac() );
                    register( OpfacType.BDE_FSE, new BdeFseOpfac() );
                    register( OpfacType.BN_FSE, new BnFseOpfac() );
                    register( OpfacType.FIST, new FistOpfac() );
                    register( OpfacType.FO, new FoOpfac() );

                    register( OpfacType.DIVARTY_CP, new CpOpfac() );
                    register( OpfacType.DS_BDE_CP, new CpOpfac() );
                    register( OpfacType.DS_BN_CP, new CpOpfac() );
                    register( OpfacType.GS_BN_CP, new CpOpfac() );
                    register( OpfacType.R_BN_CP, new CpOpfac() );
                    register( OpfacType.MLRS_BN, new CpOpfac() );

                    // Added 3 Jan 2000 - bhopkins -
                    // in hopes of fixing "Cannot create" errors.
                    register( OpfacType.GSR_FA_PLT, new CpOpfac() );
                    register( OpfacType.GSR_BN_CP, new CpOpfac() );
                    register( OpfacType.CORPS_FSE_MAIN, new CpOpfac() );

                    // Added 20 Mar 2000 - bhopkins -M
                    // in hopes of fixing "Cannot create" errors.
                    register( OpfacType.FA_PLT, new CpOpfac() );
                    register( OpfacType.MECH_FIST, new FistOpfac() );

                    register( OpfacType.ARM_FIST, new FistOpfac() );
                } {
                    register( OpfacType.DS_FA_PLT, new FaPltOpfac() );
                    register( OpfacType.GS_FA_PLT, new FaPltOpfac() );
                    register( OpfacType.R_FA_PLT,  new FaPltOpfac() );
                }
            } {
                register( OpfacType.MTR_PLT, new MortarOpfac() );
            }
        } {
            register( OpfacType.MLRS_BTRY, new MlrsOpfac() );
        }
    }

    public Opfac create( OpfacDataWrapper record, Network network )
        {
        System.out.println( "In OpfacL.create(): record.getType() = " +
                                   record.getType() );
        OpfacType opfacType = OpfacType.fromString( record.getType() );
        Opfac opfac = ( Opfac )prototypes.get( opfacType );
        if ( opfac==null )
            Log.error( "Cannot create opfac of type " + record.getType() );
        else
            {
            opfac = ( Opfac )opfac.clone();
            opfac.init( record, network );
        }
        return opfac;
    }

    protected void register( OpfacType name, Opfac prototype )
        {
        prototypes.put( name, prototype );
    }
}
