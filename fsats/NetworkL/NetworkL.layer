//                              -*- Mode: JTS -*-
// Version         :
// Author          : Robert S. MacDonald
// Last Modified By: Bryan D. Hopkins
// Last Modified On: Wed May 31  8:19:00 2000

layer NetworkL (F lower)
realm F
extends lower
imports 
    java.util.*,
    fsats.util.*,
    F.Libraries.log.Log,
    F.Libraries.laydown.*
{
    public static class NetworkImpl 
	implements Network
    {
        protected SynchronizedQueue sendQueue = new SynchronizedQueue();

        protected Thread networkThread = new Thread()
        {
            public void run()
            {
                while (true)
                {
                    Object o = sendQueue.get();
                    deliver(($TEqn.Message)o);
                }
            }
        };

	/** String identifier for this network object **/
	protected String _name;
        protected float transmitDelay;

	/** Map of OPFACS that have registered with this netobj **/
	protected Map _opfacs = new HashMap();
   
	/** Constructor */
	public NetworkImpl(NetworkDataWrapper record)
	{
	    _name = record.getName();
            transmitDelay = record.getTransmitDelay();
            networkThread.start();
	}

	/** Add an opfac to the registry **/
	public synchronized boolean register( String opfacName, Opfac opfac ) 
	{
	    // Look for existing opfac with that name
	    if( _opfacs.containsKey(opfacName) ) {
		Log.error("NetObj: Opfac " + opfacName + 
			  " is already registered.");
		return false;
	    } else {
		_opfacs.put( opfacName, opfac);
		return true;
	    }
	}
   
	/** Remove an opfac from the registry **/
	public synchronized boolean unregister( String opfacName ) 
	{
	    Object opfac = _opfacs.remove(opfacName);

	    // Was the named opfac actually registered ?
	    if( opfac == null ) {
		Log.warn("NetObj: Can't unregister opfac " + opfacName + " .");
	    }
	    return (opfac == null);
	}

        protected synchronized $TEqn.Opfac find(String opfacName)
        {
            Object o = _opfacs.get(opfacName);
            if (o==null)
            {
	        Log.error(
                    "NetObj: Message recipient " + opfacName + " not found.");
            }
            return ($TEqn.Opfac)o;
        }

        public void send($TEqn.Message message)
        {
            // Puts the message on the message sending queue.
            if(message.getDestination()!=null && !message.getDestination().equals(""))
                sendQueue.put(($TEqn.Message)message.clone());
        }

	/** Relay a message from one opfac to another **/
	protected void deliver( $TEqn.Message message ) 
	{
	    $TEqn.Opfac opfac=find(message.getDestination());
	    if (opfac!=null)
            {
                try 
                { 
                    Thread.sleep((int)(transmitDelay*1000)); 
                } 
                catch (Exception e) {}
                opfac.deliver(message);
            }
	}
    }
} 

