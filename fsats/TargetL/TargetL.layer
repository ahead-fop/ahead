//                              -*- Mode: JTS -*-
// Version         :
// Author          : Robert S. MacDonald
// Last Modified By: Bryan D. Hopkins
// Last Modified On: Mon May  8 10:36:00 2000

layer TargetL ( F lower )
realm F
extends lower 
imports java.util.*,
F.Libraries.log.Log
{
    /** 
     * Implementation of Location storing explicit latitude/longitude.
     */
    public static class LocationLatLong
	implements Location, Cloneable, java.io.Serializable
    {
	private float _latitude;
	private float _longitude;
    
	public LocationLatLong() {}

	public LocationLatLong(float latitude, float longitude) {
	    _latitude = latitude;
	    _longitude = longitude;
	}

	/** Copy constructor **/
	public Object clone() {
	    try {
		return super.clone();
	    } catch( CloneNotSupportedException shouldNeverHappen ) {
		return null;
	    }
	}

	public float getLatitude()  { return _latitude; }
	public float getLongitude() { return _longitude; }

	/** Two locations are equal if they are the same lat and long **/
	public boolean equals(Object other) {
	    if( other instanceof Location ) {
		Location l = (Location) other;
		return l.getLatitude()  == getLatitude()
		    && l.getLongitude() == getLongitude();
	    } else {
		return false;
	    }
	}

	/** Two locations are equal if they are the same lat and long **/
	public int hashcode() {
	    return (new Float(_latitude ).hashCode()) * 37 
		+  (new Float(_longitude).hashCode());
	}

	/** Standard String conversion **/
	public String toString() 
        {
	    return "Latitude="+_latitude+" Longitude="+_longitude;
	}

        private double degreesToRadians(double degrees)
        {
            return degrees*Math.PI/180.0;
        }

        public float distanceTo($TEqn.Location loc)
        {
            double lat1 = degreesToRadians(getLatitude());
            double lat2 = degreesToRadians(loc.getLatitude());
            double dlat = lat2 - lat1;
            double dlon = degreesToRadians(getLongitude() - loc.getLongitude());
            double sinLat = Math.sin(0.5*dlat);
            double sinLon = Math.sin(0.5*dlon);
            double radians = 
                2.0*Math.asin(Math.sqrt(
                    sinLat*sinLat 
                        + Math.cos(lat1)*Math.cos(lat2)*sinLon*sinLon));
            double meters = radians*180.0*60.0*1852.0/Math.PI;
            return (float)meters;
        }
    }

    /** 
     * Something that should be shot at.
     */
    public static class TargetImpl
	implements Target, Cloneable, java.io.Serializable 
    {
	protected String _targetType;
	protected Location _location;

	public TargetImpl() {}

	public TargetImpl(String targetType,
			  Location location) 
	{
	    _targetType = targetType;
	    _location   = location;
	}

	/** Copy constructor **/
	public Object clone() {
	    try {
		return super.clone();
	    } catch( CloneNotSupportedException shouldNeverHappen ) {
		return null;
	    }
	}

	/** Two targets are equal if they have equal fields **/
	public boolean equals(Object other) {
	    if( ! (other instanceof Target) ) {
		return false;
	    }

	    Target t = (Target) other;
	    return _targetType.equals(t.getType())
		&& _location.equals(t.getLocation());
	}

	/** Two targets are equal if they have equal fields **/
	public int hashCode() {
	    int hash =         _targetType.hashCode();
	    hash = 37 * hash + _location.hashCode();
	    return hash;
	}

	public String getType() { return _targetType; }
	public Location getLocation() { return _location; }

	/** Standard String conversion **/
	public String toString() {
	    return "Type=" + _targetType
		+  " Location=(" + _location+")";
	}
    }


    /** 
     * Information about a mission thread.
     */
    public static class MissionDataImpl
	implements MissionData, java.io.Serializable, Cloneable 
    {
	protected $TEqn.MissionType    _missionType;
	protected Target    _target;

	public MissionDataImpl() {}

	public MissionDataImpl($TEqn.MissionType missionType, 
			       Target target) 
	{
	    _missionType = missionType;
	    _target = target;
	}

	public $TEqn.MissionType getType()   { return _missionType; }
	public Target getTarget() { return _target; }
    
	/** Standard String conversion **/
	public String toString() 
        {
	    return "type=" + _missionType.toString() + " Target=(" + _target+")";
	}
    }
}
