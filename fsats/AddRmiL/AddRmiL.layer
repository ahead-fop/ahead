//                              -*- Mode: Jakarta -*-
// Version         :
// Author          : Robert S. MacDonald
// Last Modified By: Bryan D. Hopkins
// Last Modified On: Thu Jan 27  9:19:00 2000

layer AddRmiL ( F lower )
realm F
extends lower
imports 
java.io.*,
java.rmi.*,
java.rmi.server.UnicastRemoteObject,
//F.Libraries.RmiStuff.*,
F.Libraries.log.Log
{
    public static class NetworkObject extends lower.NetworkObject {
	NetworkObjectRmi _netObjServer;
      
	public NetworkObject(String fullName) {
	    super(fullName);
	 
	    // If fullName is an RMI-style name, string off hostname
	    //  	 int lastSlash = fullName.lastIndexOf('/');
	    //  	 if( lastSlash != -1 ) {
	    //  	    this.name = fullName.substring(lastSlash);
	    //  	 }
	    
	    // Now create RMI server
	    try {
		_netObjServer = new NetworkObjectRmi(this, fullName);
	    } catch ( RemoteException e ) {
		Log.error(e.toString());
		System.exit(10);
	    }
	}
    }

    /** We need to convert between objects that are of type
	OpfacIfcRmi and those that are OpfacIfc
	This object does it - it wraps an OpfacIfcRmi
	object around an OpfacIfc interface
    **/
    public static class LocalOWrapper 
	implements Opfac, java.io.Serializable 
    {
	$TEqn.OpfacIfcRmi _opfacStub;
   
	public LocalOWrapper( $TEqn.OpfacIfcRmi o ) {
	    _opfacStub = o;
	}
   
	public void scriptMessage( MissionId missionId ) {
	    Log.error("calling ScriptMessage from remote object");
	    System.exit(10);
	}
   
	public void send( Message message, int delay) {
	    Log.error("calling send from remote object");
	    System.exit(10);
	}
   
	public String getName() {
	    Log.error("calling send from remote object");
	    System.exit(10);
	    return null;
	}
   
	public void receive( Message m ) {
	    try {
		_opfacStub.receive(m);
	    } catch (RemoteException e) {
		Log.error("receive call failed : " + e);
		System.exit(10);
	    }
	}
   
	public boolean isAlive() {
	    try {
		return _opfacStub.isAlive();
	    } catch (RemoteException e) {
		Log.error("isAlive call failed : " + e);
		System.exit(10);
	    }
	    return false;
	}
    }
   
    /** We need to convert between objects that are of type
       NetworkObjectIfcRmi and those that are NetworkObjectIfc.
       This object does it - it wraps a NetworkObjectIfcRmi
       object around a NetworkObjectIfc interface
   **/
    public static class LocalNOWrapper 
	implements NetworkObject, java.io.Serializable 
    {
	$TEqn.NetworkObjectIfcRmi _netObjStub;
       
	public LocalNOWrapper( String netObjName ) 
	throws RemoteException, NotBoundException, 
	       java.net.MalformedURLException
	{
	    // Try to connect to the remote network object
	    _netObjStub = ($TEqn.NetworkObjectIfcRmi) Naming.lookup(netObjName);
	}
       
	/** Register a local opfac object with a remote network object **/
	public boolean register( Opfac opfac, String opfacName ) {
	    try {
		// Create a remotely exported object for the opfac
		OPFACRmi opfacServer;
		opfacServer = new OPFACRmi( opfac, opfac.getName() );

		// Now create a wrapper for the remote netobj to use
		$TEqn.OpfacIfc opfacStub;
		opfacStub = new $TEqn.LocalOWrapper( opfacServer );

		// Now register the opfac wrapper with the remote netobj
		return _netObjStub.register( opfacStub, opfac.getName() );
	    } catch (RemoteException e) {
		Log.error("can't register: " + e );
		System.exit(10);
	    }
	    return false;
	}
   
	public boolean unregister( String n ) {
	    try {
		return _netObjStub.unregister(n);
	    } catch (RemoteException e) {
		Log.error("can't unregister: " + e );
		System.exit(10);
	    }
	    return false;
	}
	
	public boolean send( Message m ) {
	    try {
		return _netObjStub.send(m);
	    } catch (RemoteException e) {
		Log.error("can't send : " + e );
		System.exit(10);
	    }
	    return false;
	}
    }
}   
