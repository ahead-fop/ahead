layer FS;

import java.io.*;

import java.util.*;

import laydown.*;

import log.Log;

SoUrCe RooT LocalL "C:!Java!FeatureOrientedProgramming!fsats!LocalL!Main.jak";

/** Refinement of Main application class **/
public class Main {
    protected Network  _network = null;
    protected Collection _scripts = new HashSet();

    /** Parse and validate the command lin arguments **/
    protected void validateArguments( String args[] ) 
        {
        // Step 1: make sure calling sequence is correct
        if ( args.length != 0 && args.length != 1 ) 
            {
            Log.log( "Usage: java FS.Main" );
            System.exit( 1 );
        }
    }
   
    protected void makeNetwork( NetworkDataWrapper record )
        {
        if ( _network!=null )
            {
            Log.error( "More than one network defined in laydown." );
        }
        else
            {
            _network = new NetworkImpl( record );
            Log.log( "Network object " + record.getName() + " created." );
        }
    }

    /** Create this simulation's network objects **/
    protected void makeNetworks() 
        {
        // Iterator over all network objects
        Iterator i = LayDown.getSelf().getAllNetworks().iterator();
        while( i.hasNext() )
            makeNetwork( ( NetworkDataWrapper )i.next() );
    }
    
    protected void makeOpfac( OpfacDataWrapper record )
        {
        Opfac opfac = OpfacImpl.create( record, _network );
        if ( opfac!=null )
            {
            Log.log( "Opfac " + opfac.getName() + " created." );
   
        // Create a script object if script file is not null
        //String scriptfile = record.getScriptFile();
        //if( scriptfile != null ) 
           //_scripts.add(new $TEqn.Script(scriptfile, opfac));
        }
    }

    /** Create the opfac objects **/
    protected void makeOpfacs() 
    {
        // Iterator over all opfacs 
        Iterator i = LayDown.getSelf().getAllOpfacs().iterator();
        while( i.hasNext() )
            makeOpfac( ( OpfacDataWrapper )i.next() );
    }

    public void run( String[] args )
        {
        validateArguments( args );

        try 
            {
            String laydownFileName = 
                    fsats.util.FsatsProperties.get( "fsats.jts.laydown" );
            LayDown.read( new File( laydownFileName ) );
        }
        catch ( Exception e ) 
            {
            e.printStackTrace();
            Log.error( "Error: Failed read of laydown file." );
            System.exit( 1 );
        }

        makeNetworks();

        makeOpfacs();

        Iterator i = _scripts.iterator();
        while ( i.hasNext() )
            ( ( Script )i.next() ).start();
    }

    public static void main( String[] args )
        {
        Main m = new Main();
        m.run( args );
    }
}
