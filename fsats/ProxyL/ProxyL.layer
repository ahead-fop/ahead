//                              -*- Mode: JTS -*-
// Version         :
// Author          : Robert S. MacDonald
// Last Modified By: 
// Last Modified On: Tue Jan 09 11:08:44 2001

layer ProxyL ( F lower )
realm F
extends lower 
imports 
    java.util.*, 
    F.Libraries.laydown.*, 
    F.Libraries.log.Log
{
    /**
     * Interface of a proxy for an opfac.
     * An opfac proxy represents one opfac's current beliefs about 
     * the present status and combat readiness of another opfac.
     */
    public interface Proxy 
        extends Cloneable
    {
        public Object clone();

	/** Pseudo Constructor **/
	void init(OpfacDataWrapper record);
	
        /** Precedence function on weapon types; highest goes first. */
        int typePrecedence();

        /** Ordering function on weapons given a mission; -1, 0, or 1. */
        int compareWeapon($TEqn.Mission mission, $TEqn.Proxy weapon);

	/** The best weapon available to this opfac to shoot this mission. */
        $TEqn.SelectedProxy getBestWeapon($TEqn.Mission mission);

        /** Can this opfac accept the mission? */
        boolean canShoot($TEqn.Mission mission);

	/** Get the opfac name for this proxy. */
	String getName();

        /** Get the opfac type for this proxy. */
        OpfacType getType(); 

        public boolean hasLocation();
        public float distanceTo($TEqn.Location loc);
    }

    /** A pair of the best weapon found and 
     *  to which opfac to send the mission.
     */
    public static class SelectedProxy
    {
        private $TEqn.Proxy via;
        private $TEqn.Proxy weapon;

        public SelectedProxy(
            $TEqn.Proxy via, $TEqn.Proxy weapon)
        {
            this.via=via;
            this.weapon=weapon;
        }

        public $TEqn.Proxy getVia() { return via; }
        public $TEqn.Proxy getWeapon() { return weapon; }
    }


    public interface Mission 
        extends lower.Mission
    {
	void proxyDeny(String opfacName);
        boolean hasDenied(String opfacName);
    }


    /** Refinement of an active mission to handle ranking proxies **/
    public static state_diagram MissionImpl
        refines lower.MissionImpl
        implements Mission
    {
        private Set denied = new HashSet();

	/** Discard current asset and go to next highest ranked **/
	public void proxyDeny(String opfacName) 
        {
            denied.add(opfacName);
	}
        
        public boolean hasDenied(String opfacName)
        {
            return denied.contains(opfacName);
        }
    }


    public interface Opfac
        extends lower.Opfac
    {
        $TEqn.Proxy getSuperProxy();
        $TEqn.Proxy getSelfProxy();
    }


    /** Add proxies for itself and its superior to an opfac. */
    public static class OpfacImpl 
	extends lower.OpfacImpl 
	implements Opfac
    {
	/** 
	 * Proxies which missions can be delegated to.
	 * Mapped by opfac name.
	 */
        protected $TEqn.Proxy selfProxy;
        protected $TEqn.Proxy superProxy;

        public $TEqn.Proxy getSelfProxy() { return selfProxy; }
        public $TEqn.Proxy getSuperProxy() { return superProxy; }

	/** Create a set of proxies of this opfac's subordinates **/
	public void init( OpfacDataWrapper record, Network network ) 
        {
	    super.init(record, network);
            selfProxy = $TEqn.ProxyImpl.create(getName());
            superProxy = $TEqn.ProxyImpl.create(getSuperior());
	}
    }


    /**
     * This class implements common proxy functionality
     */
    public static abstract class ProxyImpl 
        implements Proxy
    {
	/** The name of the opfac this proxy stands for **/
        protected String opfacName;
        protected OpfacType opfacType;
        protected Collection assets;
        protected $TEqn.Location location;

        protected void addAssets(Collection c)
        {
            Iterator i=c.iterator();
            while (i.hasNext())
                assets.add(create((String)i.next()));
        }

	/** Copy constructor **/
	public Object clone() 
        {
	    try {
		return super.clone();
	    } catch( CloneNotSupportedException shouldNeverHappen ) {
		return null;
	    }
	}

	/** Pseudo Constructor **/
	public void init(OpfacDataWrapper record) 
        {
	    opfacName = record.getName();
	    opfacType = OpfacType.fromString(record.getType());
            assets = new HashSet();
            location =
                new $TEqn.LocationLatLong(
                    record.getLatitude(),
                    record.getLongitude());
	}

        private static ProxyFactory factory = new $TEqn.ProxyFactory();

        public static $TEqn.Proxy create(String opfacName)
        {
            return factory.create(opfacName);
        }

	public String getName() 
        { 
            return opfacName; 
        }

        public OpfacType getType()
        {
            return opfacType;
        }

        public boolean hasLocation() { return location!=null; }

        public float distanceTo($TEqn.Location loc)
        {
            return location==null ? 0F : location.distanceTo(loc);
        }

        public boolean canShoot($TEqn.Mission mission) 
        { 
            return !mission.hasDenied(getName());
        }

        public int typePrecedence() { return 0; }

        protected static int sgn(float x) { return x>0 ? 1 : x<0 ? -1 : 0; }
        protected static int sgn(int x) { return x>0 ? 1 : x<0 ? -1 : 0; }

        public int compareWeapon($TEqn.Mission mission, $TEqn.Proxy weapon)
        {
            int result;

            // Choose by precedence of weapon type. 
            result = sgn(typePrecedence() - weapon.typePrecedence());
            if (result!=0) return result;

            // Choose weapon with better location knowledge.
            result = (hasLocation() ? 0 : 1)-(weapon.hasLocation() ? 0 : 1);
            if (result!=0) return result;

            // Choose closest.
            $TEqn.Location targetLoc = mission.getTarget().getLocation();
            result = sgn(weapon.distanceTo(targetLoc) - distanceTo(targetLoc));
            if (result!=0) return result;

            // Don't care.
            return 0;
        }

	/** 
	 * Rank all the proxies in the specific set and return the best.
	 */
	public $TEqn.SelectedProxy getBestWeapon($TEqn.Mission mission) 
        {
	    $TEqn.SelectedProxy best = null;
            if (canShoot(mission))
            {
                // Iterate over the collection
                Iterator i = assets.iterator();
            
                // Compare each successive proxy with the current champ
                while( i.hasNext() ) 
                {
                    $TEqn.Proxy proxy = ($TEqn.Proxy) i.next();
                    //Log.log("Check proxy: "+proxy.getName());

		    if (proxy != null)
		    {
                        $TEqn.SelectedProxy test = proxy.getBestWeapon(mission);
                        if (test!=null)
                        {
                            //Log.log("OK proxy: "+proxy.getName());
                            if (best==null 
                                || best.getWeapon().compareWeapon(
                                       mission, test.getWeapon())<0)
                            {
                                //Log.log("Best proxy: "+proxy.getName());
                                best = 
                                    new $TEqn.SelectedProxy(
                                        proxy, test.getWeapon());
                            }
                        }
		    }
                }
            }
	
	    return best;
	}
    }    


    /** Add proxy to factory.   
     */
    public static class ProxyFactory 
    {
	private Map prototypes = new HashMap();
	
        protected void register(OpfacType opfacType, $TEqn.Proxy prototype)
        {
            prototypes.put(opfacType, prototype);
        }

        public $TEqn.Proxy create(String opfacName)
     	{
            OpfacDataWrapper record = LayDown.getSelf().getOpfac(opfacName);
            OpfacType opfacType = record==null ? null : OpfacType.fromString(record.getType());
	    $TEqn.Proxy proxy = null;
	    if (opfacType == null)
		Log.error("No proxy registered for type " + (record==null ? null : record.getType()));
	    else
		proxy = ($TEqn.Proxy)prototypes.get(opfacType);

	    if( proxy == null ) 
		Log.error("No proxy registered for type " + (record==null ? null : record.getType()));
            else
            {
                proxy = ($TEqn.Proxy)proxy.clone();
                proxy.init(record);
            }

            return proxy;
        }
    }
}

