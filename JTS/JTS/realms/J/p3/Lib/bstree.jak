/* bstree - Binary Search Tree */

package p3Lib;

import JakBasic.Lang;


/**
 * Binary search tree data structure. <p>
 *
 * The data structure used here is shown in the following figure:
 * <pre>
 *     parent
 *       |
 *      ---          ---          ---          ---          --- 
 *     | x |--next->|s1 |--next->|s2 |--next->|s3 |--next->|s4 |--next->null
 *     |   |<-left--|   |<-left--|   |<-left--|   |<-left--|   |
 *      ---         |   |         ---          ---         |   |
 *     /   \        |   |---------------right------------->|   |
 *   left right     |   |<--------------right--------------|   |
 *                   ---                                    ---
 *  </pre>
 *  x is a node on the tree, its parent, left and right fields are set according
 *  to the tree algorithm
 *    
 *  s1, s2, s3 and s4 have the same key value as x and form a list "behind" x
 *   
 *  The parent fields of s1, s2, s3 and s4 are set to null to distinguish them from
 *  nodes on the tree.  ( For a node on the tree, parent, left and right fields 
 *  will never equals to null because the tree algorithm uses nil instead.)
 *  
 *  s1.right is set to s4 for backward retrieval
 *  s4.right is set to s1 to go back to the tree when the list ends
 *  s2.right and s3.right is currently set to null ( useful?)  
 */
public final class bstree extends BaseDS implements DS {
   //public DS                  lower;
   public TopParams           tp;

   environment                left, right, next, pparent, root, nil, 
                              bstree_relink, bstree_unlink;

   public String              keyfield;
   public Lang.AST_QualifiedName   keyfieldast;
   public String              keytype;
   public Lang.AST_QualifiedName   keytypeast;
   public int                 keyid;

   public bstree( DS lowerlevel ) { 
      lower = lowerlevel;
   }

   public bstree( ) { }

   public DS_Container_Type make_container_type( TopParams t, ContParams c ) {
      return new bstree_Container_Type( this, t, c );
   }

   public DS_Element_Type make_element_type( ) {
      return new bstree_Element_Type( this );
   }

   public DS_CommonCursor_Type make_commoncursor_type( ) {
      return new bstree_CommonCursor_Type( this );
   }

   public DS_Cursor_Type make_cursor_type( Usage u ) { 
        return new bstree_Cursor_Type( this, u ); 
   }

   public DrcAttributes drc( DrcAttributes d ) {
      // check to see if there are multiple bstree layers that have
	  // the same key.  If so, flag the error otherwise remember
	  // the annotation
	  
	  d.test_and_set_annotation("bstree", "----");
	  d.check_annotation("bstree", keyfield);
	  
  
	  // right now, bstree can be used anywhere, at any time.
      // just signal to upper layers that there is a retrieval_layer_present

      if ( !d.below_topmost_layers ) {
         d.below_topmost_layers = true;
         d.below_topmost_set    = "bstree";
      }

      d.retrieval_layer_present = true;
      d = lower.drc( d );
      d.retrieval_layer_present = true;

      return d;
   } 

   public void set_keyword( TOP toplayer, TopParams tph ) {
      tp = tph;     
      environment parent toplayer;
      lower.set_keyword( toplayer, tp );
   }

   public Object ParseArgs( Lang.AstNode x ) {
      Object result;

      if ( x == null || x.arg[0] == null || x.arg[0].right == null 
            || x.arg[0].right.right != null )
         ParseTE.parseError( "bstree layer expecting two arguments : keyname DS " );

      if ( !( x.arg[0].arg[0].arg[0] instanceof Lang.AST_QualifiedName ) )
         ParseTE.parseError( "bstree layer expecting first argument as key name" );

      keyfield = ( ( Lang.AST_QualifiedName ) x.arg[0].arg[0].arg[0] ).GetName( );

      result = ParseTE.parse( x.arg[0].right.arg[0] );
         
      if ( result == null || !( result instanceof DS ) )
         ParseTE.parseError( "bstree layer's second argument should be of type DS" );

      lower = ( DS ) result;
      return this;
   }
}

final class bstree_Container_Type implements DS_Container_Type {
   ContParams        cp;
   bstree            _layer;
   DS_Container_Type lower;
   environment;

   bstree_Container_Type( DS bstreelayer, TopParams t, ContParams c ) { 
      // Step 1: save the arguments as we'll refer to them later

      _layer    = ( bstree ) bstreelayer;
      cp       = c;
      _layer.tp = t;
      environment parent _layer;

      // Step 2: create chain of lower level containers

      lower = _layer.lower.make_container_type( t, cp );
   }

   public void validate( ) {
      // Step 1: validation tests ensure that the keyfield specified
      //         in the type equation actually corresponds to a known
      //         attribute

      _layer.keyid = _layer.tp.FieldIndex( _layer.keyfield );
      if ( _layer.keyid == -1 )
         ParseTE.parseError( _layer.keyfield + " is not an attribute for bstree layer" );
   
      // Step 2: keyfield is legal, now go and remember a set of
      //         derived values for later reference

      _layer.keytype = _layer.tp.FieldType[_layer.keyid];

      _layer.keyfieldast = Lang.AST_QualifiedName.Make( _layer.keyfield );
      _layer.keytypeast = Lang.AST_QualifiedName.Make( _layer.keytype );

      // Step 3: now proceed to validate lower layers

      lower.validate( );
   } 

   public Lang.AST_FieldDecl dataMembers( ) {
      return mth{
         CElemTyp root;
         CElemTyp nil;
         $mth( lower.dataMembers( ) )
      }mth;
   }

   public Lang.AST_Stmt containerMethod( ) {
      return stm{
         /* create one sentinel nil for the whole tree with color balck */
         nil = new CElemTyp( );
         nil.left = nil.right = nil.pparent = null;

         /* initialize the root of the tree to nil ( not null!!!) */
         root = nil;

         $stm( lower.containerMethod( ) );
      }stm;
   }

   public Lang.AST_Exp is_fullMethod( ) {
      return lower.is_fullMethod( );
   }
   
   public Lang.AST_Stmt insertMethod(){
     return lower.insertMethod();
   }

   public Lang.AST_Stmt storageMethod() {
      return lower.storageMethod();
   }

   public Lang.AST_Stmt finishMethod() {
      return lower.finishMethod();
   }
   
   public Lang.AST_Stmt openMethod(){
      return lower.openMethod();
   } 

}

/*
 * The data structure used here is shown in the following figure:
 *
 *     parent
 *       |
 *      ---          ---          ---          ---          --- 
 *     | x |--next->|s1 |--next->|s2 |--next->|s3 |--next->|s4 |--next->null
 *     |   |<-left--|   |<-left--|   |<-left--|   |<-left--|   |
 *      ---         |   |         ---          ---         |   |
 *     /   \        |   |---------------right------------->|   |
 *   left right     |   |<--------------right--------------|   |
 *                   ---                                    ---
 *
 *  x is a node on the tree, its parent, left and right fields are set according
 *  to the tree algorithm
 *    
 *  s1, s2, s3 and s4 have the same key value as x and form a list "behind" x
 *   
 *  The parent fields of s1, s2, s3 and s4 are set to null to distinguish them from
 *  nodes on the tree.  ( For a node on the tree, parent, left and right fields 
 *  will never equals to null because the bstree algorithm uses nil instead.)
 *  
 *  s1.right is set to s4 for backward retrieval
 *  s4.right is set to s1 to go back to the tree when the list ends
 *  s2.right and s3.right is currently set to null ( useful?)  
 *  
 */

final class bstree_Element_Type implements DS_Element_Type {
   bstree            _layer;
   DS_Element_Type   lower;
   environment;

   bstree_Element_Type( DS bstreelayer ) {
      _layer    = ( bstree ) bstreelayer;
      lower    = _layer.lower.make_element_type( );
      environment parent _layer;
   }

   // generate data members of transformed element class 

   public Lang.AST_FieldDecl dataMembers( ) {
      return mth{
         CElemTyp left, right, pparent, next;
         $mth( lower.dataMembers( ) )
      }mth;
   }

   // link is part of element constructors

   public Lang.AST_Stmt link( ) {
      return stm{
         bstree_relink( );
         $stm( lower.link( ) );
      }stm;
   }

   public Lang.AST_FieldDecl relink( ) {
      range    r = new range("!dummy");
      Lang.AST_Exp  tmp_eq_query = r.Translate( Lang.AST_QualifiedName.Make("x"), _layer.tp, 
                              exp{ $id( _layer.keyfieldast )( ) == $id( _layer.keyfieldast ) }exp );
      Lang.AST_Exp  tmp_lt_query = r.Translate( Lang.AST_QualifiedName.Make("x"), _layer.tp,
                              exp{ $id( _layer.keyfieldast )( ) > $id( _layer.keyfieldast ) }exp );

      return mth{

         final void bstree_relink( ) {
            CElemTyp x;
            CElemTyp y;
            boolean  lt = true;  /* initilization is necessary here to fool the compiler */

            x = cont.root;
            y = cont.nil;
   
            while ( x != cont.nil ) {
               y = x;
      
               if ($exp( tmp_eq_query ) ) {
                  /* There is already an element with the same key value on
                   * the tree, insert the current one to the head of list 
                   * following that element.
                   * This is much easier than the tree insertion!
                   */
                  next = x.next;
                  x.next = this;
                  left = x;
                  if ( next == null ) {
                     right = this;
                  }
                  else {
                     next.left = this;
                     right = next.right;
                     next.right = null;
                     right.right = this;
                  }
                  pparent = null;

                  /* we are finished! */
                  return;
               }
         
               /* otherwise, keep finding the right place to insert the element */
               lt = $exp( tmp_lt_query );
               if ( lt )
                  x = x.left;
               else
                  x = x.right;
            }
   
            /* insert the current element into the tree */

            pparent = y;
            left = cont.nil;
            right = cont.nil;
            next = null;

            if ( y == cont.nil ) {
               cont.root = this;
            }
            else {
               if ( lt )
                  y.left = this;
               else
                  y.right = this;
            }
         }
         
         $mth( lower.relink( ) )

      }mth;
   }

   public Lang.AST_FieldDecl unlink( ) {
      return mth{

         final void bstree_unlink( ) {
            CElemTyp x;
            CElemTyp y;

            if ( pparent == null ) {
               /* The element we want to unlink is inside a list.
                * Much easier than unlinking from the tree!
                */

               left.next = next;
               if ( next != null ) {
                  next.left = left;
                  if ( right != null ) {
                     next.right = right;
                     right.right = next;
                  }
               }
               else if ( right != null && right != this ) {
                  right.right = left;
                  left.right = right;
               }

               /* we are finished! */
               return;
            }
            else if ( next != null ) {
               /* The element we want to unlink is on the tree, but
                * it has a linked list following it.
                * Unlink in this case is also easy!
                */
               
               x = next;

               if ( x.next != null ) {
                  x.next.right = x.right;
                  x.right.right = x.next;
               }
               
               x.pparent = pparent;
               x.left = left;
               x.right = right;

               if ( pparent == cont.nil ) {
                  cont.root = x;
               }
               else {
                  if ( this == pparent.left )
                     pparent.left = x;
                  else
                     pparent.right = x;
               }

               if ( x.left != cont.nil )
                  x.left.pparent = x;
               if ( x.right != cont.nil )
                  x.right.pparent = x;

               /* we are finished! */
               return;
            }

            if ( left == cont.nil || right == cont.nil ) {
               y = this;
            }
            else {
               y = right;
               while ( y.left != cont.nil )
                  y = y.left;
            }

            if ( y.left != cont.nil )
               x = y.left;
            else
               x = y.right;

            x.pparent = y.pparent;

            if ( y.pparent == cont.nil ) {
               cont.root = x;
            }
            else {
               if ( y == y.pparent.left )
                  y.pparent.left = x;
               else
                  y.pparent.right = x;
            }

            if ( y != this ) {
               /* Let's call the element we want to unlink as z.
                * Instead of copying all data fields of y into z
                * as in the standard algorithm (which is not very
                * easy here because we don't know how many data
                * fields y has), I copy the whole tree structure
                * surrounding z to y, in other words, put y right 
                * into where z was in the tree.
                */

               y.pparent = pparent;
               if ( pparent == cont.nil ) {
                  cont.root = y;
               }
               else {
                  if ( this == pparent.left )
                     pparent.left = y;
                  else
                     pparent.right = y;
               }

               y.left = left;
               if ( left != cont.nil )
                  left.pparent = y;

               y.right = right;
               if ( right != cont.nil )
                  right.pparent = y;

               /* since x.pparent may point to this, ADD THIS ! */
               if ( x.pparent == this )
                  x.pparent = y;
            }
         }

         $mth( lower.unlink( ) )

      }mth;
   }

   // can update attributes at will, except for the keyfield

   public Lang.AST_Stmt upd( int fieldno ) {
      if ( fieldno == _layer.keyid ) 
         return stm{ 
            bstree_unlink( );
            $stm( lower.upd( fieldno ) );
            bstree_relink( );
         }stm;
      return lower.upd( fieldno );
   }   
}

final class bstree_CommonCursor_Type implements DS_CommonCursor_Type {
   bstree _layer;
   DS_CommonCursor_Type lower;
   environment;

   bstree_CommonCursor_Type( DS bstreelayer ) {
      _layer = ( bstree ) bstreelayer;
      lower = _layer.lower.make_commoncursor_type( );
      environment parent _layer;
   }

   public Lang.AST_FieldDecl dataMembers( ) {
      return lower.dataMembers( );
   }


   public Lang.AST_Stmt insertMethod( ) {
         return lower.insertMethod( );
   }

   public Lang.AST_Stmt removeMethod( ) {
      return stm{
         obj.bstree_unlink( );
         $stm( lower.removeMethod( ) );
      }stm;
   }

   public Lang.AST_FieldDecl movementMethods( ) {
      /* methods like start( ), adv( ), end( ), back( ) are not provided here
       * because for different predicates the code generated would be different
       */
      return lower.movementMethods( );
   }
}

final class bstree_Cursor_Type extends RetSometimes implements DS_Cursor_Type {
   bstree      _layer;
   range       r;
   Usage       u;
   boolean     fwd;
   boolean     equ;
   Lang.AST_Exp     lbt;
   Lang.AST_Exp     lbf;
   Lang.AST_Exp     ubt;
   Lang.AST_Exp     ubf;
   environment x, y;

   bstree_Cursor_Type( DS bstreelayer, Usage usage ) {
      _layer = ( bstree ) bstreelayer;
      u = usage;
      lower = _layer.lower.make_cursor_type( u );

      r = new range( _layer.keyfield );
      r.DetermineRange( u.predicate );
      lbt = r.Translate( id{ obj }id, _layer.tp, r.LowerPredicate( true ) );
      lbf = r.Translate( id{ obj }id, _layer.tp, r.LowerPredicate( false ) );
      ubt = r.Translate( id{ obj }id, _layer.tp, r.UpperPredicate( true ) );
      ubf = r.Translate( id{ obj }id, _layer.tp, r.UpperPredicate( false ) );

      environment parent _layer;
   }

   public void optimizeAction( Qopt q ) {
      int cost = Qopt.INFINITY;

      /* decide whether to go forward or backward
       * if actual_order == desired_order, use the direction user specifies
       * otherwise, choose forward (which is a little bit simpler) unless the 
       * query type is UPPER_SCAN_QUERY (in this case backward is faster)
       */
      if ( u.order == -1 || u.order == _layer.keyid )
         fwd = u.forward;
      else if ( r.QueryType( ) == range.UPPER_SCAN_QUERY )
         fwd = false;
      else
         fwd = true;

      equ = false;
      switch ( r.QueryType( ) ) {
      case range.SCAN_QUERY:       cost = Qopt.TREESCAN; break;
      case range.UPPER_SCAN_QUERY: cost = ( fwd ? Qopt.TREESCAN : Qopt.HALF_TREESCAN ); break;
      case range.LOWER_SCAN_QUERY: cost = ( fwd ? Qopt.HALF_TREESCAN : Qopt.TREESCAN ); break;
      case range.RANGE_QUERY:      cost = Qopt.HALF_TREESCAN; break;
      case range.POINT_QUERY:      cost = Qopt.BINTREE_LOCATE; equ = true; break;
      }

      if ( q.cost > cost ) {
         q.fastest_layer = _layer;
         q.cost = cost;

         q.requires_skip = true;
         q.requires_buffering = u.upd[_layer.keyid];
         q.requires_sorting = ( u.order != -1 ) && ( u.order != _layer.keyid );
         q.requires_inbetween = u.del && !q.requires_buffering && !q.requires_sorting;
      }
   }

   public DS thisLayer( ) {
      return _layer;
   }

   public Lang.AST_FieldDecl dataMembers( ) {
      return lower.dataMembers( );
   }

   public Lang.AST_Stmt cursorMethod( ) {
      return lower.cursorMethod( );
   }

   // firstMth - returns the first element

   public Lang.AST_Stmt firstMth( ) {
      if ( !equ && fwd ) {
         if ( lbt == null ) return stm{
            /* find the tree minimum */
            obj = cont.root;
            if ( obj != cont.nil )
               while ( obj.left != cont.nil )
                  obj = obj.left;
         }stm;
                        
         return stm{
            CElemTyp x = cont.nil;

            /* Pretend we are going to insert the lowerbound value 
             * into the tree, see where we end up with.
             */
            obj = cont.root;
            while ( obj != cont.nil ) {
               x = obj;
               if ( $exp( lbt ) )
                  obj = obj.left;
               else
                  obj = obj.right;
            }

            if ( x != cont.nil ) {
               /* If x satisfies the lowerbound, it is the one we are looking for. */
               obj = x;
               if ( $exp( lbf ) ) { 
                  /* Otherwise, go to the successor of x.
                   * It can be proved that this wound be the one we are looking for. */
                  /* NOTE: When converting the data structure to pure binary tree
                   * the following code segment need to be rewritten.
                   */
                  if ( obj.right != cont.nil ) {
                     obj = obj.right;
                     while ( obj.left != cont.nil )
                        obj = obj.left;
                  }
                  else {
                     x = obj.pparent;
                     while ( x != cont.nil && obj == x.right ) {
                        obj = x;
                        x = obj.pparent;
                     }
                     obj = x;
                  }
               }
            }
         }stm;
      }

      if ( !equ ) {
         if ( ubt == null ) return stm{
            /* find the tree maximum */
            obj = cont.root;
            if ( obj != cont.nil )
               while ( obj.right != cont.nil )
                  obj = obj.right;
            if ( obj != cont.nil && obj.next != null )
               /* go to the end of the list */
               obj = obj.next.right;
         }stm;

         return stm{
            CElemTyp x = cont.nil;

            /* Pretend we are going to insert the upperbound value 
             * into the tree, see where we end up with.
             */
            obj = cont.root;
            while ( obj != cont.nil ) {
               x = obj;
               if ( $exp( ubt ) )
                  obj = obj.right;
               else
                  obj = obj.left;
            }

            if ( x != cont.nil ) {
               /* If x satisfies the upperbound, it is the one we are looking for. */
               obj = x;
               if ( $exp( ubf ) ) { 
                  /* Otherwise, go to the predecessor of x.
                   * It can be proved that this wound be the one we are looking for. */
                  /* NOTE: When converting the data structure to pure binary tree
                   * the following code segment need to be rewritten.
                   */
                  if ( obj.left != cont.nil ) {
                     obj = obj.left;
                     while ( obj.right != cont.nil )
                        obj = obj.right;
                  }
                  else {
                     x = obj.pparent;
                     while ( x != cont.nil && obj == x.left ) {
                        obj = x;
                        x = obj.pparent;
                     }
                     obj = x;
                  }
               }

               if ( obj != cont.nil && obj.next != null )
                  /* go to the end of the list */
                  obj = obj.next.right;
            }
         }stm;
      }

      Lang.AST_Stmt s1 = stm{
         /* binary tree search */
         obj = cont.root;
         while ( obj != cont.nil && ( $exp( ubf ) ) ) {
            if ( $exp( lbt ) )
               obj = obj.left;
            else
               obj = obj.right;
         }
      }stm;

      if ( fwd )
         return s1;

      return stm{
         $stm( s1 );
         if ( obj != cont.nil && obj.next != null )
            /* go to the end of the list */
            obj = obj.next.right;
      }stm;
   }

   // moreMth - tests for physical end-of-data structure 
   //           the qualify layer tests for logical end-of-data structure

   public Lang.AST_Exp moreMth( ) {
      return exp{ obj != null && obj != cont.nil }exp;
   }

   // noMoreMth( ) - sets cursor to the physical end of list 

   public Lang.AST_Stmt noMoreMth( ) {
      return stm{ obj = null; }stm;
   }

   // nextMth - returns the next ( unqualified ) element
   public Lang.AST_Stmt nextMth( )  {
      if ( !equ && fwd ) return stm{
         if ( obj.next != null ) {
            obj = obj.next;
         }
         else {
            if ( obj.pparent == null )
               /* back to the tree */
               obj = obj.right.left;

            /* find the tree successor */
            if ( obj.right != cont.nil ) {
               obj = obj.right;
               while ( obj.left != cont.nil )
                  obj = obj.left;
            }
            else {
               CElemTyp y;
               y = obj.pparent;
               while ( y != cont.nil && obj == y.right ) {
                  obj = y;
                  y = obj.pparent;
               }
               obj = y;
            }
         }
      }stm;

      if ( !equ ) return stm{
         if ( obj.pparent == null ) {
            obj = obj.left;
         }
         else {
            /* find the tree predecessor */
            if ( obj.left != cont.nil ) {
               obj = obj.left;
               while ( obj.right != cont.nil )
                  obj = obj.right;
            }
            else {
               CElemTyp y;
               y = obj.pparent;
               while ( y != cont.nil && obj == y.left ) {
                  obj = y;
                  y = obj.pparent;
               }
               obj = y;
            }

            if ( obj != cont.nil && obj.next != null )
               /* go to the end of the list */
               obj = obj.next.right;
         }
      }stm;

      if ( fwd ) return stm{
         obj = obj.next;
      }stm;

      return stm{
         if ( obj.pparent != null )
            obj = null;
         else
            obj = obj.left;
      }stm;

   }

   public Lang.AST_Exp lowerBoundExp( boolean pos ) {
      /* Always return null since we have handle the lowerbound in FirstMth() */
      return null;
   }

   public Lang.AST_Exp upperBoundExp( boolean pos ) {
      if ( equ )
         return null;
      else if ( fwd )
         return r.UpperPredicate( pos );
      else
         return r.LowerPredicate( pos );
   }

   // return translated residual predicate
   // Note: in the case that there is no residual, a null pointer
   // is returned rather than exp{true}exp.  this should make
   // it easier to do optimizations
   
   public Lang.AST_Exp residualExp( ) {
      if ( u.predicate != null )
         return r.Residual( _layer.tp, u.predicate );
      return null;
   }

   public Lang.AST_Stmt removeMethod( ) {
      return lower.removeMethod( );
   }

}

