/* qualify - this layer generates generic first, Next methods
   from primitive first, next methods provided by lower layers */

package p3Lib;

import Jakarta.util.Util;
import JakBasic.Lang;


public final class qualify extends BaseDS implements DS {
   //public DS        lower;
   public TopParams tp;
   environment ;

   public qualify( DS lowerlevel ) { 
      lower = lowerlevel;
   }

   public qualify( ) { }

   public DS_Container_Type make_container_type( TopParams t, ContParams c ) {
      return new qualify_Container_Type( this, t, c );
   }

   public DS_Element_Type make_element_type( ) {
      return new qualify_Element_Type( this );
   }

   public DS_CommonCursor_Type make_commoncursor_type() {
      return new qualify_CommonCursor_Type( this );
   }

   public DS_Cursor_Type make_cursor_type( Usage u ) { 
        return new qualify_Cursor_Type( this, u ); 
   }

   public DrcAttributes drc( DrcAttributes d ) {
      if (!d.qualify_present) {
         d.qualify_present   = true;
      }
      else
         DrcAttributes.DrcError("too many qualification layers");
      d = lower.drc(d);
      d.qualify_present = true;
      if (!d.retrieval_layer_present) {
         DrcAttributes.DrcError("No retrieval layer in type equation");
         d.retrieval_layer_present = true;
      }
      return d;
   } 

   public void set_keyword( TOP toplayer, TopParams tph ) {
      tp = tph;
      environment parent toplayer;
      lower.set_keyword( toplayer, tp );
   }

   public Object ParseArgs( Lang.AstNode x ) {
      Object result = null;

      if (x != null && x.arg[0] != null && x.arg[0].right != null)
         result = ParseTE.parse(x);
      if (result == null || !(result instanceof DS)) 
         ParseTE.parseError( "qualify layer expecting single parameter of type DS");
      lower = (DS) result;
      return this;
   }
}



final class qualify_Container_Type implements DS_Container_Type {
   ContParams        cp;
   qualify           _layer;
   DS_Container_Type lower;
   environment;

   qualify_Container_Type( DS qualifylayer, TopParams t, ContParams c ) { 
      // Step 1: save the arguments as we'll refer to them later

      _layer    = (qualify) qualifylayer;
      cp       = c;
      _layer.tp = t;
      environment parent _layer;

      // Step 2: create chain of lower level containers

      lower = _layer.lower.make_container_type( t, cp );
   }

   public void validate() {

      // Step 1: nothing to validate as qualify has no nonrealm parameters

      lower.validate();
   }

   public Lang.AST_FieldDecl dataMembers() {
      return lower.dataMembers();
   }

   public Lang.AST_Stmt containerMethod() {
     return lower.containerMethod();
   }

   public Lang.AST_Exp is_fullMethod() {
     return lower.is_fullMethod();
   }
   
   public Lang.AST_Stmt insertMethod(){
     return lower.insertMethod();
   }

   public Lang.AST_Stmt storageMethod() {
      return lower.storageMethod();
   }

   public Lang.AST_Stmt finishMethod() {
      return lower.finishMethod();
   }
   
   public Lang.AST_Stmt openMethod() {
         return lower.openMethod();
   }

}


class qualify_Element_Type implements DS_Element_Type {
   qualify _layer;
   DS_Element_Type lower;
   environment;

   qualify_Element_Type( DS qualifylayer ) {
      _layer = (qualify) qualifylayer;
      lower = _layer.lower.make_element_type();
      environment parent _layer;
   }

   // generate data members of transformed element class - please note
   // that emp_1 is hard coded

   public Lang.AST_FieldDecl dataMembers() {
      return lower.dataMembers();
   }

   // link statements as part of element constructors

   public Lang.AST_Stmt link() {
      return lower.link();
   }

   // link to head of the list

   public Lang.AST_FieldDecl relink() {
      return lower.relink();
   }

   // remove from list

   public Lang.AST_FieldDecl unlink() {
      return lower.unlink();
   }

   // can update attributes at will

   public Lang.AST_Stmt upd( int fieldno ) {
      return lower.upd( fieldno );
   }
   
}

final class qualify_CommonCursor_Type implements DS_CommonCursor_Type {
   qualify _layer;
   DS_CommonCursor_Type lower;
   environment;

   qualify_CommonCursor_Type( DS d_list ) {
      _layer = (qualify) d_list;
      lower = _layer.lower.make_commoncursor_type();
      environment parent _layer;
   }

   public Lang.AST_FieldDecl dataMembers() {
      return lower.dataMembers();
   }

   public Lang.AST_Stmt insertMethod( ) {
         return lower.insertMethod( );
   }

   public Lang.AST_Stmt removeMethod() {
      return lower.removeMethod();
   }

   public Lang.AST_FieldDecl movementMethods() {
      return lower.movementMethods();
   }
}


class qualify_Cursor_Type implements DS_Cursor_Type {
    qualify _layer;
    DS_Cursor_Type lower;
    Lang.AST_Exp        pred;
    boolean        requires_skip;
    environment;

    qualify_Cursor_Type( DS qualifylayer, Usage u ) {
       _layer = (qualify) qualifylayer;
       lower = _layer.lower.make_cursor_type( u );
       pred  = u.predicate;
       environment parent _layer;
    }

    public Qopt optimize( Qopt q ) {
       q = lower.optimize(q);
       requires_skip = q.requires_skip;
       return q;
    }

    public Lang.AST_FieldDecl dataMembers() {
       return lower.dataMembers();
    }

    public Lang.AST_Stmt cursorMethod() {
       return lower.cursorMethod();
    }

    public Lang.AST_Stmt firstMethod() {
       range    r  = new range("!dummy");
       Lang.AST_Exp  lb = r.Translate( id{ obj}id, _layer.tp, lower.lowerBound(false));
       Lang.AST_Exp  ub = r.Translate( id{ obj}id, _layer.tp, lower.upperBound(true));
       Lang.AST_Exp  re = r.Translate( id{ obj}id, _layer.tp, lower.residual());
       Lang.AST_Stmt s1;

       // Step 1: compute the preface of the first() method.
       //         Always perform a start(), and optionally 
       //         skip over elements whose keys are below the
       //         lower bound.  if the lower bound is - infinity
       //         or the lower bound is > -infinity but the
       //         data structure that is to be traversed can be
       //         directly positioned on the lower bound element
       //         then don't generate extra code for postioning

       if (lb == null || !requires_skip ) 
          s1 = stm{
       $stm(lower.firstMethod());
          }stm;
       else
          s1 = stm{
       $stm(lower.firstMethod());
       while ( $exp(lower.moreMethod()) && $exp(lb) ) { 
          $stm(lower.nextMethod());
       }
          }stm;

       // Step 2: Use or simplify the code that iterates over
       //         the retrieval region.  the most general case
       //         is ub != null and re != null; the other cases
       //         are merely specializations of it.

/* old version by Don 
       if (ub != null && re != null) 
          return stm{
       $stm(s1);
       while ( $exp(lower.moreMethod()) && $exp(ub) ) {
          if ( $exp(re) ) return obj;
          $stm( lower.nextMethod() );
       }
       $stm(lower.noMoreMethod());
          }stm;

       if (ub != null && re == null) 
         return stm{
       $stm(s1);
       if ( $exp(lower.moreMethod()) && $exp(ub) ) return obj;
       $stm(lower.noMoreMethod());
          }stm;       
********************/

/* new version by Gang */
      if (ub != null && re != null) return stm{
         $stm(s1);
         while ( $exp(lower.moreMethod()) ) {
            if ( !( $exp( ub ) ) ) {
               $stm(lower.noMoreMethod());
               break;
            }
            if ( $exp(re) )
               break;
            $stm( lower.nextMethod() );
         }
      }stm;

      if (ub != null && re == null) return stm{
         $stm(s1);
         if ( $exp(lower.moreMethod()) && !( $exp(ub) ) ) {
            $stm(lower.noMoreMethod());
         }
      }stm;
/* *****************/

       if (ub == null && re != null) 
          return stm{
       $stm(s1);
       while ( $exp(lower.moreMethod()) && !( $exp(re)) ) {
          $stm( lower.nextMethod() );
       }
          }stm;

       if (ub == null && re == null) 
          return s1;

       Util.fatalError("firstMethod - should have returned by now");
       return null;
    }

    public Lang.AST_Exp moreMethod() {
       return lower.moreMethod();
    }

    public Lang.AST_Stmt noMoreMethod() {
       // can't imagine why upper layers would call this...
       return lower.noMoreMethod();
    }

    public Lang.AST_Stmt nextMethod()  {
       range    r  = new range("!dummy");
       Lang.AST_Exp  lb = r.Translate( id{ obj}id, _layer.tp, lower.lowerBound(false));
       Lang.AST_Exp  ub = r.Translate( id{ obj}id, _layer.tp, lower.upperBound(true));
       Lang.AST_Exp  re = r.Translate( id{ obj}id, _layer.tp, lower.residual());

       // Step 1: Use or simplify the code that iterates over
       //         the retrieval region.  the most general case
       //         is ub != null and re != null; the other cases
       //         are merely specializations of it.


/* old version by Don 
       if (ub != null && re != null) 
          return stm{
       $stm(lower.nextMethod());
       while ( $exp(lower.moreMethod()) && $exp(ub) ) {
          if ( $exp(re) ) return obj;
          $stm( lower.nextMethod() );
       }
       $stm( lower.noMoreMethod());
          }stm;

       if (ub != null && re == null) 
          return stm{
       $stm(lower.nextMethod());
       if ( $exp(lower.moreMethod()) && $exp(ub) ) return obj;
       $stm( lower.noMoreMethod());
          }stm;
********************/

/* new version by Gang */
      if (ub != null && re != null) return stm{
         $stm(lower.nextMethod());
         while ( $exp(lower.moreMethod()) ) {
            if ( !( $exp( ub ) ) ) {
               $stm( lower.noMoreMethod());
               break;
            }
            if ( $exp(re) )
               break;
            $stm( lower.nextMethod() );
         }
      }stm;

      if (ub != null && re == null) return stm{
         $stm(lower.nextMethod());
         if ( $exp(lower.moreMethod()) && !( $exp(ub) ) ) {
            $stm( lower.noMoreMethod());
         }
      }stm;
/* *****************/

       if (ub == null && re != null) 
          return stm{
       $stm(lower.nextMethod());
       while ( $exp(lower.moreMethod()) && !( $exp(re)) ) {
          $stm( lower.nextMethod() );
       }
          }stm;

       if (ub == null && re == null) 
          return lower.nextMethod();

       Util.fatalError("nextMethod - should have returned by now");
       return null;
    }

    public Lang.AST_Exp lowerBound( boolean pos ) {
       // can't imagine why lowerBound would be called from higher layers...
       return lower.lowerBound( pos );
    }

    public Lang.AST_Exp upperBound( boolean pos ) {
       // can't imagine why upperBound would be called from higher layers...
       return lower.upperBound( pos );
    }
    public Lang.AST_Exp residual() {
       // can't imagine why residual would be called from higher layers...
       return lower.residual();
    }

    public Lang.AST_Stmt removeMethod() {
      return lower.removeMethod();
    }
}
