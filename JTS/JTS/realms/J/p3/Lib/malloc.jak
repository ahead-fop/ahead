/* malloc : DS */

package p3Lib;

import Jakarta.util.Util;
import JakBasic.Lang;


public final class malloc extends BaseDS implements DS {
   public TopParams tp;
   environment;

   public malloc( ) { }

   public DS_Container_Type make_container_type( TopParams t, ContParams c ) {
      return new malloc_Container_Type( this, t, c );
   }

   public DS_Element_Type make_element_type() {
      return new malloc_Element_Type( this );
   }

   public DS_CommonCursor_Type make_commoncursor_type() { 
      return new malloc_CommonCursor_Type( this );
   }

   public DS_Cursor_Type make_cursor_type( Usage u ) { 
      return new malloc_Cursor_Type( this, u );
   }

   public DrcAttributes drc( DrcAttributes d ) {

      // test preconditions - if error, make primitive attempt at error recovery

      if (!d.retrieval_layer_present) {
         DrcAttributes.DrcError("no retrieval layer above malloc");
      }
      d.retrieval_layer_present = false;
      return d;
   }

   public void set_keyword( TOP toplayer, TopParams tph ) {
      tp = tph;
      environment parent toplayer;
   }

   public Object ParseArgs( Lang.AstNode x ) {
      if (x == null || (x.arg[0] == null && x.arg[0].right == null))
         return this;
      ParseTE.parseError("malloc layer has no parameters");
      return null;
   }
}



final class malloc_Container_Type implements DS_Container_Type {
   ContParams cp;
   malloc     _layer;
   environment;

   malloc_Container_Type( DS malloclayer, TopParams t, ContParams c ) { 
      // Step 1: save the arguments as we'll refer to them later

      _layer    = (malloc) malloclayer;
      cp       = c;
      _layer.tp = t;
      environment parent _layer;
   }

   public void validate() {

      // Step 1: nothing to validate as malloc has no non-realm parameters
   }

   public Lang.AST_FieldDecl dataMembers() {
      return mth{ }mth;
   }

   public Lang.AST_Stmt containerMethod() {
     return stm{ }stm;
   }

   public Lang.AST_Exp is_fullMethod() {
     return exp{ false }exp;
   }
   
   public Lang.AST_Stmt insertMethod(){
     return stm{  }stm;
   }

   public Lang.AST_Stmt storageMethod() {
      return stm{ 
	  }stm;
   }

   public Lang.AST_Stmt finishMethod() {
      return stm{ }stm;
   }
   
   public Lang.AST_Stmt openMethod(){
      return stm{}stm;
  } 

}
   
final class malloc_Element_Type implements DS_Element_Type {
   malloc    _layer;
   TopParams tp;
   environment;

   malloc_Element_Type( DS malloclayer ) {
      _layer = (malloc) malloclayer;
      tp = _layer.tp;
      environment parent _layer;
   }

   public Lang.AST_FieldDecl dataMembers() {
      return mth{ }mth;
   }

   public Lang.AST_Stmt link() {
      return stm{ }stm;
   }

   // there are no element relinking methods to generate

   public Lang.AST_FieldDecl relink(){
      return mth{ }mth;
   }

   // there are no element unlinking methods to generate

   public Lang.AST_FieldDecl unlink(){
      return mth{ }mth;
   }

   // there are no update statements

   public Lang.AST_Stmt upd( int i ) {
      Lang.AST_QualifiedName n = (Lang.AST_QualifiedName) tp.AST_FieldName[i].clone();
      return stm{ $id(n) = _newvalue; }stm;
   }
}


class malloc_CommonCursor_Type implements DS_CommonCursor_Type {
   malloc _layer;
   environment;
   
   malloc_CommonCursor_Type( DS thislayer ) {
      _layer = (malloc) thislayer;
      environment parent _layer;
   }

   public Lang.AST_FieldDecl dataMembers() {
      return mth{ }mth;
   }

   public Lang.AST_Stmt insertMethod( ) {
         return stm{ }stm;
   }

   public Lang.AST_Stmt removeMethod() {
      return stm{ }stm;
   }

   public Lang.AST_FieldDecl movementMethods() {
      return mth{ }mth;
   }
} 

class malloc_Cursor_Type implements DS_Cursor_Type {
   malloc _layer;
   environment;

   malloc_Cursor_Type( DS malloclayer, Usage u ) {
      _layer = (malloc) malloclayer;
      environment parent _layer;
   }

   private void error( String routine ) {
      Util.fatalError("P3 is making illegal call to " + routine + "\n");
   }

   public Qopt    optimize( Qopt q ) {
      // basically, don't select malloc as a retrieval layer
      return q;
   }

   public Lang.AST_FieldDecl dataMembers() {
      return mth{ }mth;
   }

   // note: malloc should add nothing to the cursor

   public Lang.AST_Stmt cursorMethod() {
      return stm{ }stm;
   }

   public Lang.AST_Stmt firstMethod() {
      // should never be called
      error("malloc:firstMethod");
      return null;
   }

   public Lang.AST_Exp moreMethod() {
      // should never be called
      error("malloc:moreMethod");
      return null;
   }

   public Lang.AST_Stmt noMoreMethod() {
      // should never be called
      error("malloc:noMoreMethod");
      return null;
   }

   public Lang.AST_Stmt nextMethod() {
      // should never be called
      error("malloc:nextMethod");
      return null;
   }

   public Lang.AST_Exp lowerBound( boolean pos ) {
      // should never be called
      error("malloc:lowerBound");
      return null;
   }

   public Lang.AST_Exp upperBound( boolean pos ) {
      // should never be called
      error("malloc:upperBound");
      return null;
   }

   public Lang.AST_Exp residual() {
      // should never be called
      error("malloc:residual");
      return null;
   }

   public Lang.AST_Stmt removeMethod() {
      return null;
   }
}
