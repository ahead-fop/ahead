/* Generated By:JavaCC: Do not edit this line. BaliParser.java */
package theParser;

public class BaliParser implements BaliParserConstants {
    static private StringBuffer buffer = new StringBuffer(64);

    // This method builds an AstToken from a Token. It uses the StringBuffer
    // 'buffer'.
    static Lang.AstToken t2at(Token tok) {
        Token special;
        String bstr;

        // This special case happens if an optional token is involved.
        if (tok == null)
            return(null);

        buffer.setLength(0);
        special = tok.specialToken;
        while (special != null) {
            buffer.insert(0, special.toString());
            special = special.specialToken;
        }

        bstr = buffer.substring(0, buffer.length());
        buffer.setLength(0);
        return(new Lang.AstToken().setParms(bstr, tok.image, tok.endLine));
    }

  static final public Lang.AST_Program AST_Program() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPEEQN:
      nt1 = TE_Generator();
          {if (true) return((Lang.AST_Program) nt1);}
      break;
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(2147483647)) {
        nt1 = Layer_Decl();
                {if (true) return(new Lang.LDecl().setParms(nt1));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PACKAGE:
          nt1 = PackageDeclaration();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
          nt2 = AST_Imports();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case FINAL:
        case INTERFACE:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case SEMICOLON:
          nt3 = AST_Class();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ont2 = new Lang.AstOptNode().setParms(nt2);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.program().setParms(ont1, ont2, ont3));}
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.TE_Generator TE_Generator() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    t1 = jj_consume_token(TYPEEQN);
    nt1 = AST_QualifiedName();
    nt2 = AST_QualifiedName();
    t2 = jj_consume_token(ASSIGN);
    nt3 = AST_Exp();
    t3 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.TEGen().setParms(t2at(t1), nt1, nt2, t2at(t2), nt3, t2at(t3)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.LayerHeader LayerHeader() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIVE:
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = LayerModifiers();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    t1 = jj_consume_token(LAYER);
    nt2 = QName();
    t2 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      nt3 = AST_ParList();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    t3 = jj_consume_token(RPAREN);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.LyrHeader().setParms(ont1, t2at(t1), nt2, t2at(t2), ont3, t2at(t3)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Layer_Decl Layer_Decl() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null, nt4=null, nt5=null, nt6=null, nt7=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null, ont4=null, ont5=null, ont6=null, ont7=null;
        Token t1=null, t2=null, t3=null, t4=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIVE:
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = LayerModifiers();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    t1 = jj_consume_token(LAYER);
    nt2 = QName();
    t2 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      nt3 = AST_ParList();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    t3 = jj_consume_token(RPAREN);
    t4 = jj_consume_token(REALM);
    nt4 = QName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      nt5 = SuperLayer();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORTS:
      nt6 = LayerImports();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    nt7 = ClassBody();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                ont5 = new Lang.AstOptNode().setParms(nt5);
                ont6 = new Lang.AstOptNode().setParms(nt6);
                {if (true) return(new Lang.LayerDecl().setParms(ont1, t2at(t1), nt2, t2at(t2), ont3, t2at(t3), t2at(t4), nt4, ont5, ont6, nt7));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.LayerModifiers LayerModifiers() throws ParseException {
        Lang.LayerModifiers list = new Lang.LayerModifiers();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_1:
    while (true) {
      nt1 = LayerModifier();
                                list.add(new Lang.LayerModifiersElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RELATIVE:
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_1;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.LayerModifier LayerModifier() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = Modifier();
                {if (true) return(new Lang.NonRelMod().setParms(nt1));}
      break;
    case RELATIVE:
      t1 = jj_consume_token(RELATIVE);
                {if (true) return(new Lang.ModRelative().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.SuperLayer SuperLayer() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(EXTENDS);
    nt1 = AST_QualifiedName();
                {if (true) return(new Lang.SupLayer().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.LayerImports LayerImports() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(IMPORTS);
    nt1 = ImportList();
                {if (true) return(new Lang.LyrImports().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ImportList ImportList() throws ParseException {
        Lang.ImportList list = new Lang.ImportList();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = ImportPack();
                  list.add(new Lang.ImportListElem().setParms(null, nt1));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_2;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = ImportPack();
                  list.add(new Lang.ImportListElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ImportPack ImportPack() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    nt1 = AST_QualifiedName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      nt2 = DotTimes();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.ImportPak().setParms(nt1, ont2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_Imports AST_Imports() throws ParseException {
        Lang.AST_Imports list = new Lang.AST_Imports();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_3:
    while (true) {
      nt1 = ImportDeclaration();
                                    list.add(new Lang.AST_ImportsElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_Class AST_Class() throws ParseException {
        Lang.AST_Class list = new Lang.AST_Class();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_4:
    while (true) {
      nt1 = TypeDeclaration();
                                  list.add(new Lang.AST_ClassElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PackageDeclaration PackageDeclaration() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(PACKAGE);
    nt1 = AST_QualifiedName();
    t2 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.PackStm().setParms(t2at(t1), nt1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ImportDeclaration ImportDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(IMPORT);
    nt1 = AST_QualifiedName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      nt2 = DotTimes();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    t2 = jj_consume_token(SEMICOLON);
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.ImpQual().setParms(t2at(t1), nt1, ont2, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.DotTimes DotTimes() throws ParseException {
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(DOT);
    t2 = jj_consume_token(STAR);
                {if (true) return(new Lang.DotTimesC().setParms(t2at(t1), t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.TypeDeclaration TypeDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case CLASS:
    case FINAL:
    case INTERFACE:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        nt1 = AST_Modifiers();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      nt2 = UnmodifiedTypeDeclaration();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.ModTypeDecl().setParms(ont1, nt2));}
      break;
    case SEMICOLON:
      t1 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.EmptyTDecl().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.UnmodifiedTypeDeclaration UnmodifiedTypeDeclaration() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      nt1 = UnmodifiedClassDeclaration();
          {if (true) return((Lang.UnmodifiedTypeDeclaration) nt1);}
      break;
    case INTERFACE:
      nt1 = UnmodifiedInterfaceDeclaration();
          {if (true) return((Lang.UnmodifiedTypeDeclaration) nt1);}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_Modifiers AST_Modifiers() throws ParseException {
        Lang.AST_Modifiers list = new Lang.AST_Modifiers();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_5:
    while (true) {
      nt1 = Modifier();
                           list.add(new Lang.AST_ModifiersElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case FINAL:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_5;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Modifier Modifier() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
      t1 = jj_consume_token(ABSTRACT);
                {if (true) return(new Lang.ModAbstract().setParms(t2at(t1)));}
      break;
    case FINAL:
      t1 = jj_consume_token(FINAL);
                {if (true) return(new Lang.ModFinal().setParms(t2at(t1)));}
      break;
    case PUBLIC:
      t1 = jj_consume_token(PUBLIC);
                {if (true) return(new Lang.ModPublic().setParms(t2at(t1)));}
      break;
    case PROTECTED:
      t1 = jj_consume_token(PROTECTED);
                {if (true) return(new Lang.ModProtected().setParms(t2at(t1)));}
      break;
    case PRIVATE:
      t1 = jj_consume_token(PRIVATE);
                {if (true) return(new Lang.ModPrivate().setParms(t2at(t1)));}
      break;
    case STATIC:
      t1 = jj_consume_token(STATIC);
                {if (true) return(new Lang.ModStatic().setParms(t2at(t1)));}
      break;
    case TRANSIENT:
      t1 = jj_consume_token(TRANSIENT);
                {if (true) return(new Lang.ModTransient().setParms(t2at(t1)));}
      break;
    case VOLATILE:
      t1 = jj_consume_token(VOLATILE);
                {if (true) return(new Lang.ModVolatile().setParms(t2at(t1)));}
      break;
    case NATIVE:
      t1 = jj_consume_token(NATIVE);
                {if (true) return(new Lang.ModNative().setParms(t2at(t1)));}
      break;
    case SYNCHRONIZED:
      t1 = jj_consume_token(SYNCHRONIZED);
                {if (true) return(new Lang.ModSynchronized().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.UnmodifiedClassDeclaration UnmodifiedClassDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null, nt4=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null, ont4=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(CLASS);
    nt1 = QName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      nt2 = ExtendsClause();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPLEMENTS:
      nt3 = ImplementsClause();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    nt4 = ClassBody();
                ont2 = new Lang.AstOptNode().setParms(nt2);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.UmodClassDecl().setParms(t2at(t1), nt1, ont2, ont3, nt4));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ExtendsClause ExtendsClause() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(EXTENDS);
    nt1 = AST_QualifiedName();
                {if (true) return(new Lang.ExtClause().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ImplementsClause ImplementsClause() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(IMPLEMENTS);
    nt1 = AST_TypeNameList();
                {if (true) return(new Lang.ImplClause().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ClassBody ClassBody() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case LBRACE:
    case IDENTIFIER:
      nt1 = AST_FieldDecl();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RBRACE);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.ClsBody().setParms(t2at(t1), ont1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_FieldDecl AST_FieldDecl() throws ParseException {
        Lang.AST_FieldDecl list = new Lang.AST_FieldDecl();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_6:
    while (true) {
      nt1 = ClassBodyDeclaration();
                                       list.add(new Lang.AST_FieldDeclElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case LBRACE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_6;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ClassBodyDeclaration ClassBodyDeclaration() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    if (jj_2_2(2)) {
      nt1 = Initializer();
          {if (true) return((Lang.ClassBodyDeclaration) nt1);}
    } else if (jj_2_3(2147483647)) {
      nt1 = NestedClassDeclaration();
          {if (true) return((Lang.ClassBodyDeclaration) nt1);}
    } else if (jj_2_4(2147483647)) {
      nt1 = NestedInterfaceDeclaration();
          {if (true) return((Lang.ClassBodyDeclaration) nt1);}
    } else if (jj_2_5(2147483647)) {
      nt1 = ConstructorDeclaration();
          {if (true) return((Lang.ClassBodyDeclaration) nt1);}
    } else if (jj_2_6(2147483647)) {
      nt1 = MethodDeclaration();
          {if (true) return((Lang.ClassBodyDeclaration) nt1);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
        nt1 = FieldDeclaration();
          {if (true) return((Lang.ClassBodyDeclaration) nt1);}
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.NestedClassDeclaration NestedClassDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    nt2 = UnmodifiedClassDeclaration();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.NClassDecl().setParms(ont1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MethodDeclarationLookahead MethodDeclarationLookahead() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    nt2 = AST_TypeName();
    nt3 = QName();
    t1 = jj_consume_token(LPAREN);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.MDeclLA().setParms(ont1, nt2, nt3, t2at(t1)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.InterfaceDeclaration InterfaceDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    nt2 = UnmodifiedInterfaceDeclaration();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.InterDecl().setParms(ont1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.NestedInterfaceDeclaration NestedInterfaceDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    nt2 = UnmodifiedInterfaceDeclaration();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.NInterDecl().setParms(ont1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.UnmodifiedInterfaceDeclaration UnmodifiedInterfaceDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    t1 = jj_consume_token(INTERFACE);
    nt1 = QName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      nt2 = IntExtClause();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    t2 = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case IDENTIFIER:
      nt3 = InterfaceMemberDeclarations();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    t3 = jj_consume_token(RBRACE);
                ont2 = new Lang.AstOptNode().setParms(nt2);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.UmInterDecl().setParms(t2at(t1), nt1, ont2, t2at(t2), ont3, t2at(t3)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.IntExtClause IntExtClause() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(EXTENDS);
    nt1 = AST_TypeNameList();
                {if (true) return(new Lang.IntExtClauseC().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.InterfaceMemberDeclarations InterfaceMemberDeclarations() throws ParseException {
        Lang.InterfaceMemberDeclarations list = new Lang.InterfaceMemberDeclarations();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_7:
    while (true) {
      nt1 = InterfaceMemberDeclaration();
                                             list.add(new Lang.InterfaceMemberDeclarationsElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_7;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.InterfaceMemberDeclaration InterfaceMemberDeclaration() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    if (jj_2_7(2147483647)) {
      nt1 = NestedClassDeclaration();
                {if (true) return(new Lang.NCDecl().setParms(nt1));}
    } else if (jj_2_8(2147483647)) {
      nt1 = NestedInterfaceDeclaration();
                {if (true) return(new Lang.NIDecl().setParms(nt1));}
    } else if (jj_2_9(2147483647)) {
      nt1 = MethodDeclaration();
                {if (true) return(new Lang.MDecl().setParms(nt1));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDENTIFIER:
        nt1 = FieldDeclaration();
                {if (true) return(new Lang.FDecl().setParms(nt1));}
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.FieldDeclaration FieldDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    nt2 = AST_TypeName();
    nt3 = AST_VarDecl();
    t1 = jj_consume_token(SEMICOLON);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.FldVarDec().setParms(ont1, nt2, nt3, t2at(t1)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_VarDecl AST_VarDecl() throws ParseException {
        Lang.AST_VarDecl list = new Lang.AST_VarDecl();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = VariableDeclarator();
                  list.add(new Lang.AST_VarDeclElem().setParms(null, nt1));
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_8;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = VariableDeclarator();
                  list.add(new Lang.AST_VarDeclElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.VariableDeclarator VariableDeclarator() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    nt1 = VariableDeclaratorId();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      nt2 = VarAssign();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.VarDecl().setParms(nt1, ont2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.VarAssign VarAssign() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(ASSIGN);
    nt1 = AST_VarInit();
                {if (true) return(new Lang.VarAssignC().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.VariableDeclaratorId VariableDeclaratorId() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    nt1 = QName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      nt2 = Dims();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.DecNameDim().setParms(nt1, ont2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Dims Dims() throws ParseException {
        Lang.Dims list = new Lang.Dims();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_9:
    while (true) {
      nt1 = Dim();
                                   list.add(new Lang.DimsElem().setParms(nt1));
      if (jj_2_10(2)) {
        ;
      } else {
        break label_9;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Dim Dim() throws ParseException {
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(LBRACKET);
    t2 = jj_consume_token(RBRACKET);
                {if (true) return(new Lang.Dim2().setParms(t2at(t1), t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_VarInit AST_VarInit() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null, t3=null;
        Lang.AstOptToken ot1=null, ot2=null, ot3=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      t1 = jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case LPAREN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        nt1 = AST_ArrayInit();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        t2 = jj_consume_token(COMMA);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      t3 = jj_consume_token(RBRACE);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ot2 = new Lang.AstOptToken().setParms(t2at(t2));
                {if (true) return(new Lang.ArrInit().setParms(t2at(t1), ont1, ot2, t2at(t3)));}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = Expression();
                {if (true) return(new Lang.VarInitExpr().setParms(nt1));}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_ArrayInit AST_ArrayInit() throws ParseException {
        Lang.AST_ArrayInit list = new Lang.AST_ArrayInit();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = AST_VarInit();
                  list.add(new Lang.AST_ArrayInitElem().setParms(null, nt1));
    label_10:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_10;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = AST_VarInit();
                  list.add(new Lang.AST_ArrayInitElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MethodDeclaration MethodDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null, nt4=null, nt5=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null, ont4=null, ont5=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    nt2 = AST_TypeName();
    nt3 = MethodDeclarator();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      nt4 = ThrowsClause();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    nt5 = MethodDeclSuffix();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ont4 = new Lang.AstOptNode().setParms(nt4);
                {if (true) return(new Lang.MethodDcl().setParms(ont1, nt2, nt3, ont4, nt5));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ThrowsClause ThrowsClause() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(THROWS);
    nt1 = AST_TypeNameList();
                {if (true) return(new Lang.ThrowsClauseC().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MethodDeclSuffix MethodDeclSuffix() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      nt1 = Block();
                {if (true) return(new Lang.MDSBlock().setParms(nt1));}
      break;
    case SEMICOLON:
      t1 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.MDSEmpty().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MethodDeclarator MethodDeclarator() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null, t2=null;
        boolean justNT;
    nt1 = QName();
    t1 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      nt2 = AST_ParList();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      nt3 = Dims();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.MthDector().setParms(nt1, t2at(t1), ont2, t2at(t2), ont3));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_ParList AST_ParList() throws ParseException {
        Lang.AST_ParList list = new Lang.AST_ParList();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = FormalParameter();
                  list.add(new Lang.AST_ParListElem().setParms(null, nt1));
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_11;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = FormalParameter();
                  list.add(new Lang.AST_ParListElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.FormalParameter FormalParameter() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        Lang.AstOptToken ot1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      t1 = jj_consume_token(FINAL);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    nt1 = AST_TypeName();
    nt2 = VariableDeclaratorId();
                ot1 = new Lang.AstOptToken().setParms(t2at(t1));
                {if (true) return(new Lang.FormParDecl().setParms(ot1, nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ConstructorDeclaration ConstructorDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null, nt4=null, nt5=null, nt6=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null, ont4=null, ont5=null, ont6=null;
        Token t1=null, t2=null, t3=null, t4=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABSTRACT:
    case FINAL:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case STATIC:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOLATILE:
      nt1 = AST_Modifiers();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    nt2 = QName();
    t1 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDENTIFIER:
      nt3 = AST_ParList();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THROWS:
      nt4 = ThrowsClause();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    t3 = jj_consume_token(LBRACE);
    if (jj_2_12(2147483647)) {
      nt5 = ExplicitConstructorInvocation();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CHAR:
    case CLASS:
    case CONTINUE:
    case DO:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case IF:
    case INT:
    case INTERFACE:
    case LONG:
    case NEW:
    case NULL:
    case RETURN:
    case SHORT:
    case SUPER:
    case SWITCH:
    case SYNCHRONIZED:
    case THIS:
    case THROW:
    case TRUE:
    case TRY:
    case VOID:
    case WHILE:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt6 = AST_Stmt();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    t4 = jj_consume_token(RBRACE);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                ont4 = new Lang.AstOptNode().setParms(nt4);
                ont5 = new Lang.AstOptNode().setParms(nt5);
                ont6 = new Lang.AstOptNode().setParms(nt6);
                {if (true) return(new Lang.ConDecl().setParms(ont1, nt2, t2at(t1), ont3, t2at(t2), ont4, t2at(t3), ont5, ont6, t2at(t4)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ExplicitConstructorInvocation ExplicitConstructorInvocation() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        Token t1=null, t2=null;
        boolean justNT;
    if (jj_2_14(2147483647)) {
      t1 = jj_consume_token(THIS);
      nt1 = Arguments();
      t2 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.ConThis().setParms(t2at(t1), nt1, t2at(t2)));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case LPAREN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        if (jj_2_13(2)) {
          nt1 = PrimDot();
        } else {
          ;
        }
        t1 = jj_consume_token(SUPER);
        nt2 = Arguments();
        t2 = jj_consume_token(SEMICOLON);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.ConSuper().setParms(ont1, t2at(t1), nt2, t2at(t2)));}
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PrimDot PrimDot() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    nt1 = PrimaryExpression();
    t1 = jj_consume_token(DOT);
                {if (true) return(new Lang.PrimDotC().setParms(nt1, t2at(t1)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Initializer Initializer() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        Lang.AstOptToken ot1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
      t1 = jj_consume_token(STATIC);
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    nt1 = Block();
                ot1 = new Lang.AstOptToken().setParms(t2at(t1));
                {if (true) return(new Lang.Init().setParms(ot1, nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_TypeName AST_TypeName() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
      nt1 = PrimitiveType();
      if (jj_2_15(2)) {
        nt2 = Dims();
      } else {
        ;
      }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.PrimType().setParms(nt1, ont2));}
      break;
    case IDENTIFIER:
      nt1 = AST_QualifiedName();
      if (jj_2_16(2)) {
        nt2 = Dims();
      } else {
        ;
      }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.QNameType().setParms(nt1, ont2));}
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PrimitiveType PrimitiveType() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
      t1 = jj_consume_token(BOOLEAN);
                {if (true) return(new Lang.BoolTyp().setParms(t2at(t1)));}
      break;
    case CHAR:
      t1 = jj_consume_token(CHAR);
                {if (true) return(new Lang.CharTyp().setParms(t2at(t1)));}
      break;
    case BYTE:
      t1 = jj_consume_token(BYTE);
                {if (true) return(new Lang.ByteTyp().setParms(t2at(t1)));}
      break;
    case SHORT:
      t1 = jj_consume_token(SHORT);
                {if (true) return(new Lang.ShortTyp().setParms(t2at(t1)));}
      break;
    case INT:
      t1 = jj_consume_token(INT);
                {if (true) return(new Lang.IntTyp().setParms(t2at(t1)));}
      break;
    case LONG:
      t1 = jj_consume_token(LONG);
                {if (true) return(new Lang.LongTyp().setParms(t2at(t1)));}
      break;
    case FLOAT:
      t1 = jj_consume_token(FLOAT);
                {if (true) return(new Lang.FloatTyp().setParms(t2at(t1)));}
      break;
    case DOUBLE:
      t1 = jj_consume_token(DOUBLE);
                {if (true) return(new Lang.DoubleTyp().setParms(t2at(t1)));}
      break;
    case VOID:
      t1 = jj_consume_token(VOID);
                {if (true) return(new Lang.VoidTyp().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_QualifiedName AST_QualifiedName() throws ParseException {
        Lang.AST_QualifiedName list = new Lang.AST_QualifiedName();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = QName();
                  list.add(new Lang.AST_QualifiedNameElem().setParms(null, nt1));
    label_12:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_12;
      }
      t1 = jj_consume_token(DOT);
      nt2 = QName();
                  list.add(new Lang.AST_QualifiedNameElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.QName QName() throws ParseException {
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(IDENTIFIER);
                {if (true) return(new Lang.NameId().setParms(t2at(t1)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_TypeNameList AST_TypeNameList() throws ParseException {
        Lang.AST_TypeNameList list = new Lang.AST_TypeNameList();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = TName();
                  list.add(new Lang.AST_TypeNameListElem().setParms(null, nt1));
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_13;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = TName();
                  list.add(new Lang.AST_TypeNameListElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.TName TName() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    nt1 = AST_TypeName();
                {if (true) return(new Lang.TNClass().setParms(nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Expression Expression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        boolean justNT;
    nt1 = ConditionalExpression();
                                      justNT=true;
    if (jj_2_18(2)) {
      nt2 = AssignmentOperator();
      nt3 = Expression();
                                                                                                               justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.Expression) nt1);}
                {if (true) return(new Lang.AsgExpr().setParms(nt1, nt2, nt3));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_Exp AST_Exp() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    nt1 = Expression();
          {if (true) return((Lang.AST_Exp) nt1);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AssignmentOperator AssignmentOperator() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      t1 = jj_consume_token(ASSIGN);
                {if (true) return(new Lang.Assign().setParms(t2at(t1)));}
      break;
    case STARASSIGN:
      t1 = jj_consume_token(STARASSIGN);
                {if (true) return(new Lang.AssnTimes().setParms(t2at(t1)));}
      break;
    case SLASHASSIGN:
      t1 = jj_consume_token(SLASHASSIGN);
                {if (true) return(new Lang.AssnDiv().setParms(t2at(t1)));}
      break;
    case REMASSIGN:
      t1 = jj_consume_token(REMASSIGN);
                {if (true) return(new Lang.AssnMod().setParms(t2at(t1)));}
      break;
    case PLUSASSIGN:
      t1 = jj_consume_token(PLUSASSIGN);
                {if (true) return(new Lang.AssnPlus().setParms(t2at(t1)));}
      break;
    case MINUSASSIGN:
      t1 = jj_consume_token(MINUSASSIGN);
                {if (true) return(new Lang.AssnMinus().setParms(t2at(t1)));}
      break;
    case LSHIFTASSIGN:
      t1 = jj_consume_token(LSHIFTASSIGN);
                {if (true) return(new Lang.AssnShL().setParms(t2at(t1)));}
      break;
    case RSIGNEDSHIFTASSIGN:
      t1 = jj_consume_token(RSIGNEDSHIFTASSIGN);
                {if (true) return(new Lang.AssnShR().setParms(t2at(t1)));}
      break;
    case RUNSIGNEDSHIFTASSIGN:
      t1 = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                {if (true) return(new Lang.AssnShRR().setParms(t2at(t1)));}
      break;
    case ANDASSIGN:
      t1 = jj_consume_token(ANDASSIGN);
                {if (true) return(new Lang.AssnAnd().setParms(t2at(t1)));}
      break;
    case XORASSIGN:
      t1 = jj_consume_token(XORASSIGN);
                {if (true) return(new Lang.AssnXor().setParms(t2at(t1)));}
      break;
    case ORASSIGN:
      t1 = jj_consume_token(ORASSIGN);
                {if (true) return(new Lang.AssnOr().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ConditionalExpression ConditionalExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Token t1=null, t2=null;
        boolean justNT;
    nt1 = ConditionalOrExpression();
                                        justNT=true;
    if (jj_2_19(2)) {
      t1 = jj_consume_token(HOOK);
      nt2 = Expression();
      t2 = jj_consume_token(COLON);
      nt3 = ConditionalExpression();
                                                                                                                                  justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.ConditionalExpression) nt1);}
                {if (true) return(new Lang.QuestExpr().setParms(nt1, t2at(t1), nt2, t2at(t2), nt3));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ConditionalOrExpression ConditionalOrExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = ConditionalAndExpression();
                                         justNT=true;
    if (jj_2_20(2)) {
      nt2 = MoreCondOrExpr();
                                                                                             justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.ConditionalOrExpression) nt1);}
                {if (true) return(new Lang.CondOrExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreCondOrExpr MoreCondOrExpr() throws ParseException {
        Lang.MoreCondOrExpr list = new Lang.MoreCondOrExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_14:
    while (true) {
      nt1 = COEBody();
                                       list.add(new Lang.MoreCondOrExprElem().setParms(nt1));
      if (jj_2_21(2)) {
        ;
      } else {
        break label_14;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.COEBody COEBody() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(SC_OR);
    nt1 = ConditionalAndExpression();
                {if (true) return(new Lang.COEBod().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ConditionalAndExpression ConditionalAndExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = InclusiveOrExpression();
                                      justNT=true;
    if (jj_2_22(2)) {
      nt2 = MoreCondAndExpr();
                                                                                           justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.ConditionalAndExpression) nt1);}
                {if (true) return(new Lang.CondAndExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreCondAndExpr MoreCondAndExpr() throws ParseException {
        Lang.MoreCondAndExpr list = new Lang.MoreCondAndExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_15:
    while (true) {
      nt1 = CAEBody();
                                       list.add(new Lang.MoreCondAndExprElem().setParms(nt1));
      if (jj_2_23(2)) {
        ;
      } else {
        break label_15;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.CAEBody CAEBody() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(SC_AND);
    nt1 = InclusiveOrExpression();
                {if (true) return(new Lang.CAEBod().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.InclusiveOrExpression InclusiveOrExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = ExclusiveOrExpression();
                                      justNT=true;
    if (jj_2_24(2)) {
      nt2 = MoreInclOrExpr();
                                                                                          justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.InclusiveOrExpression) nt1);}
                {if (true) return(new Lang.InclOrExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreInclOrExpr MoreInclOrExpr() throws ParseException {
        Lang.MoreInclOrExpr list = new Lang.MoreInclOrExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_16:
    while (true) {
      nt1 = IOEBody();
                                       list.add(new Lang.MoreInclOrExprElem().setParms(nt1));
      if (jj_2_25(2)) {
        ;
      } else {
        break label_16;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.IOEBody IOEBody() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(BIT_OR);
    nt1 = ExclusiveOrExpression();
                {if (true) return(new Lang.IOEBod().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ExclusiveOrExpression ExclusiveOrExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = AndExpression();
                              justNT=true;
    if (jj_2_26(2)) {
      nt2 = MoreExclOrExpr();
                                                                                  justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.ExclusiveOrExpression) nt1);}
                {if (true) return(new Lang.ExclOrExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreExclOrExpr MoreExclOrExpr() throws ParseException {
        Lang.MoreExclOrExpr list = new Lang.MoreExclOrExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_17:
    while (true) {
      nt1 = EOEBody();
                                       list.add(new Lang.MoreExclOrExprElem().setParms(nt1));
      if (jj_2_27(2)) {
        ;
      } else {
        break label_17;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.EOEBody EOEBody() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(XOR);
    nt1 = AndExpression();
                {if (true) return(new Lang.EOEBod().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AndExpression AndExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = EqualityExpression();
                                   justNT=true;
    if (jj_2_28(2)) {
      nt2 = MoreAndExpr();
                                                                                    justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.AndExpression) nt1);}
                {if (true) return(new Lang.AndExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreAndExpr MoreAndExpr() throws ParseException {
        Lang.MoreAndExpr list = new Lang.MoreAndExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_18:
    while (true) {
      nt1 = AEBody();
                                      list.add(new Lang.MoreAndExprElem().setParms(nt1));
      if (jj_2_29(2)) {
        ;
      } else {
        break label_18;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AEBody AEBody() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(BIT_AND);
    nt1 = EqualityExpression();
                {if (true) return(new Lang.AEBod().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.EqualityExpression EqualityExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = InstanceOfExpression();
                                     justNT=true;
    if (jj_2_30(2)) {
      nt2 = MoreEqExpr();
                                                                                     justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.EqualityExpression) nt1);}
                {if (true) return(new Lang.EqExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreEqExpr MoreEqExpr() throws ParseException {
        Lang.MoreEqExpr list = new Lang.MoreEqExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_19:
    while (true) {
      nt1 = EEBody();
                                      list.add(new Lang.MoreEqExprElem().setParms(nt1));
      if (jj_2_31(2)) {
        ;
      } else {
        break label_19;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.EEBody EEBody() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = EqExprChoices();
    nt2 = InstanceOfExpression();
                {if (true) return(new Lang.EEBodyC().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.EqExprChoices EqExprChoices() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t1 = jj_consume_token(EQ);
                {if (true) return(new Lang.Eq().setParms(t2at(t1)));}
      break;
    case NE:
      t1 = jj_consume_token(NE);
                {if (true) return(new Lang.Neq().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.InstanceOfExpression InstanceOfExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = RelationalExpression();
                                     justNT=true;
    if (jj_2_32(2)) {
      t1 = jj_consume_token(INSTANCEOF);
      nt2 = AST_TypeName();
                                                                                                       justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.InstanceOfExpression) nt1);}
                {if (true) return(new Lang.IoExpr().setParms(nt1, t2at(t1), nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.RelationalExpression RelationalExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = ShiftExpression();
                                justNT=true;
    if (jj_2_33(2)) {
      nt2 = MoreRelExpr();
                                                                                 justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.RelationalExpression) nt1);}
                {if (true) return(new Lang.RelExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreRelExpr MoreRelExpr() throws ParseException {
        Lang.MoreRelExpr list = new Lang.MoreRelExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_20:
    while (true) {
      nt1 = REBody();
                                      list.add(new Lang.MoreRelExprElem().setParms(nt1));
      if (jj_2_34(2)) {
        ;
      } else {
        break label_20;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.REBody REBody() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = RelExprChoices();
    nt2 = ShiftExpression();
                {if (true) return(new Lang.REBod().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.RelExprChoices RelExprChoices() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
      t1 = jj_consume_token(LT);
                {if (true) return(new Lang.LtOp().setParms(t2at(t1)));}
      break;
    case GT:
      t1 = jj_consume_token(GT);
                {if (true) return(new Lang.GtOp().setParms(t2at(t1)));}
      break;
    case LE:
      t1 = jj_consume_token(LE);
                {if (true) return(new Lang.LeOp().setParms(t2at(t1)));}
      break;
    case GE:
      t1 = jj_consume_token(GE);
                {if (true) return(new Lang.GeOp().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ShiftExpression ShiftExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = AdditiveExpression();
                                   justNT=true;
    if (jj_2_35(2)) {
      nt2 = MoreShiftExpr();
                                                                                      justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.ShiftExpression) nt1);}
                {if (true) return(new Lang.ShiftExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreShiftExpr MoreShiftExpr() throws ParseException {
        Lang.MoreShiftExpr list = new Lang.MoreShiftExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_21:
    while (true) {
      nt1 = SEBody();
                                      list.add(new Lang.MoreShiftExprElem().setParms(nt1));
      if (jj_2_36(2)) {
        ;
      } else {
        break label_21;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.SEBody SEBody() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = ShiftExprChoices();
    nt2 = AdditiveExpression();
                {if (true) return(new Lang.SEBodyC().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ShiftExprChoices ShiftExprChoices() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LSHIFT:
      t1 = jj_consume_token(LSHIFT);
                {if (true) return(new Lang.LShift().setParms(t2at(t1)));}
      break;
    case RSIGNEDSHIFT:
      t1 = jj_consume_token(RSIGNEDSHIFT);
                {if (true) return(new Lang.RShift().setParms(t2at(t1)));}
      break;
    case RUNSIGNEDSHIFT:
      t1 = jj_consume_token(RUNSIGNEDSHIFT);
                {if (true) return(new Lang.RRShift().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AdditiveExpression AdditiveExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = MultiplicativeExpression();
                                         justNT=true;
    if (jj_2_37(2)) {
      nt2 = MoreAddExpr();
                                                                                          justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.AdditiveExpression) nt1);}
                {if (true) return(new Lang.AddExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreAddExpr MoreAddExpr() throws ParseException {
        Lang.MoreAddExpr list = new Lang.MoreAddExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_22:
    while (true) {
      nt1 = AdEBody();
                                       list.add(new Lang.MoreAddExprElem().setParms(nt1));
      if (jj_2_38(2)) {
        ;
      } else {
        break label_22;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AdEBody AdEBody() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = AddExprChoices();
    nt2 = MultiplicativeExpression();
                {if (true) return(new Lang.AdEBod().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AddExprChoices AddExprChoices() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t1 = jj_consume_token(PLUS);
                {if (true) return(new Lang.Plus().setParms(t2at(t1)));}
      break;
    case MINUS:
      t1 = jj_consume_token(MINUS);
                {if (true) return(new Lang.Minus().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MultiplicativeExpression MultiplicativeExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = UnaryExpression();
                                justNT=true;
    if (jj_2_39(2)) {
      nt2 = MoreMultExpr();
                                                                                  justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.MultiplicativeExpression) nt1);}
                {if (true) return(new Lang.MultExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MoreMultExpr MoreMultExpr() throws ParseException {
        Lang.MoreMultExpr list = new Lang.MoreMultExpr();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_23:
    while (true) {
      nt1 = MEBody();
                                      list.add(new Lang.MoreMultExprElem().setParms(nt1));
      if (jj_2_40(2)) {
        ;
      } else {
        break label_23;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MEBody MEBody() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = MultExprChoices();
    nt2 = UnaryExpression();
                {if (true) return(new Lang.MEBod().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.MultExprChoices MultExprChoices() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      t1 = jj_consume_token(STAR);
                {if (true) return(new Lang.Mult().setParms(t2at(t1)));}
      break;
    case SLASH:
      t1 = jj_consume_token(SLASH);
                {if (true) return(new Lang.Div().setParms(t2at(t1)));}
      break;
    case REM:
      t1 = jj_consume_token(REM);
                {if (true) return(new Lang.Mod().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.UnaryExpression UnaryExpression() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t1 = jj_consume_token(PLUS);
      nt1 = UnaryExpression();
                {if (true) return(new Lang.PlusUE().setParms(t2at(t1), nt1));}
      break;
    case MINUS:
      t1 = jj_consume_token(MINUS);
      nt1 = UnaryExpression();
                {if (true) return(new Lang.MinusUE().setParms(t2at(t1), nt1));}
      break;
    case INCR:
      nt1 = PreIncrementExpression();
          {if (true) return((Lang.UnaryExpression) nt1);}
      break;
    case DECR:
      nt1 = PreDecrementExpression();
          {if (true) return((Lang.UnaryExpression) nt1);}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case BANG:
    case TILDE:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = UnaryExpressionNotPlusMinus();
          {if (true) return((Lang.UnaryExpression) nt1);}
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PreIncrementExpression PreIncrementExpression() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(INCR);
    nt1 = PrimaryExpression();
                {if (true) return(new Lang.PIncExpr().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PreDecrementExpression PreDecrementExpression() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(DECR);
    nt1 = PrimaryExpression();
                {if (true) return(new Lang.PDecExpr().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      t1 = jj_consume_token(TILDE);
                {if (true) return(new Lang.TildeUE().setParms(t2at(t1)));}
      break;
    case BANG:
      t1 = jj_consume_token(BANG);
      nt1 = UnaryExpression();
                {if (true) return(new Lang.NotUE().setParms(t2at(t1), nt1));}
      break;
    default:
      jj_la1[65] = jj_gen;
      if (jj_2_41(2147483647)) {
        nt1 = CastExpression();
          {if (true) return((Lang.UnaryExpressionNotPlusMinus) nt1);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case LPAREN:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
          nt1 = PostfixExpression();
          {if (true) return((Lang.UnaryExpressionNotPlusMinus) nt1);}
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.CastLookahead CastLookahead() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    if (jj_2_42(2)) {
      t1 = jj_consume_token(LPAREN);
      nt1 = PrimitiveType();
                {if (true) return(new Lang.Cla1().setParms(t2at(t1), nt1));}
    } else if (jj_2_43(2147483647)) {
      t1 = jj_consume_token(LPAREN);
      nt1 = AST_QualifiedName();
      t2 = jj_consume_token(LBRACKET);
      t3 = jj_consume_token(RBRACKET);
                {if (true) return(new Lang.Cla2().setParms(t2at(t1), nt1, t2at(t2), t2at(t3)));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        t1 = jj_consume_token(LPAREN);
        nt1 = AST_QualifiedName();
        t2 = jj_consume_token(RPAREN);
        nt2 = CastLookaheadChoices();
                {if (true) return(new Lang.Cla3().setParms(t2at(t1), nt1, t2at(t2), nt2));}
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.CastLookaheadChoices CastLookaheadChoices() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      t1 = jj_consume_token(TILDE);
                {if (true) return(new Lang.TildeLA().setParms(t2at(t1)));}
      break;
    case BANG:
      t1 = jj_consume_token(BANG);
                {if (true) return(new Lang.BangLA().setParms(t2at(t1)));}
      break;
    case LPAREN:
      t1 = jj_consume_token(LPAREN);
                {if (true) return(new Lang.OpParenLA().setParms(t2at(t1)));}
      break;
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
                {if (true) return(new Lang.IdLA().setParms(t2at(t1)));}
      break;
    case THIS:
      t1 = jj_consume_token(THIS);
                {if (true) return(new Lang.ThisLA().setParms(t2at(t1)));}
      break;
    case SUPER:
      t1 = jj_consume_token(SUPER);
                {if (true) return(new Lang.SuperLA().setParms(t2at(t1)));}
      break;
    case NEW:
      t1 = jj_consume_token(NEW);
                {if (true) return(new Lang.NewLA().setParms(t2at(t1)));}
      break;
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      nt1 = Literal();
                {if (true) return(new Lang.LitLA().setParms(nt1));}
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PostfixExpression PostfixExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = PrimaryExpression();
                                  justNT=true;
    if (jj_2_44(2)) {
      nt2 = PEPostIncDec();
                                                                                    justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.PostfixExpression) nt1);}
                {if (true) return(new Lang.PEIncDec().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PEPostIncDec PEPostIncDec() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      t1 = jj_consume_token(INCR);
                {if (true) return(new Lang.PlusPlus2().setParms(t2at(t1)));}
      break;
    case DECR:
      t1 = jj_consume_token(DECR);
                {if (true) return(new Lang.MinusMinus2().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.CastExpression CastExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null, t2=null;
        boolean justNT;
    if (jj_2_45(2147483647)) {
      t1 = jj_consume_token(LPAREN);
      nt1 = AST_TypeName();
      t2 = jj_consume_token(RPAREN);
      nt2 = UnaryExpression();
                {if (true) return(new Lang.CastExpr1().setParms(t2at(t1), nt1, t2at(t2), nt2));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        t1 = jj_consume_token(LPAREN);
        nt1 = AST_TypeName();
        t2 = jj_consume_token(RPAREN);
        nt2 = UnaryExpressionNotPlusMinus();
                {if (true) return(new Lang.CastExpr2().setParms(t2at(t1), nt1, t2at(t2), nt2));}
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PrimaryExpression PrimaryExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        boolean justNT;
    nt1 = PrimaryPrefix();
                              justNT=true;
    if (jj_2_46(2)) {
      nt2 = Suffixes();
                                                                            justNT=false;
    } else {
      ;
    }
                if (justNT)
                        {if (true) return((Lang.PrimaryExpression) nt1);}
                {if (true) return(new Lang.PrimExpr().setParms(nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Suffixes Suffixes() throws ParseException {
        Lang.Suffixes list = new Lang.Suffixes();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_24:
    while (true) {
      nt1 = PrimarySuffix();
                                             list.add(new Lang.SuffixesElem().setParms(nt1));
      if (jj_2_47(2)) {
        ;
      } else {
        break label_24;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PrimaryPrefix PrimaryPrefix() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null, t2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case NULL:
    case TRUE:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      nt1 = Literal();
          {if (true) return((Lang.PrimaryPrefix) nt1);}
      break;
    case THIS:
      t1 = jj_consume_token(THIS);
                {if (true) return(new Lang.ThisPre().setParms(t2at(t1)));}
      break;
    case SUPER:
      t1 = jj_consume_token(SUPER);
      t2 = jj_consume_token(DOT);
      nt1 = QName();
                {if (true) return(new Lang.SuperPre().setParms(t2at(t1), t2at(t2), nt1));}
      break;
    case LPAREN:
      t1 = jj_consume_token(LPAREN);
      nt1 = Expression();
      t2 = jj_consume_token(RPAREN);
                {if (true) return(new Lang.ExprPre().setParms(t2at(t1), nt1, t2at(t2)));}
      break;
    case NEW:
      nt1 = AllocationExpression();
          {if (true) return((Lang.PrimaryPrefix) nt1);}
      break;
    default:
      jj_la1[71] = jj_gen;
      if (jj_2_48(2147483647)) {
        nt1 = AST_TypeName();
        t1 = jj_consume_token(DOT);
        t2 = jj_consume_token(CLASS);
                {if (true) return(new Lang.RTPre().setParms(nt1, t2at(t1), t2at(t2)));}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          nt1 = AST_QualifiedName();
                {if (true) return(new Lang.PPQualName().setParms(nt1));}
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.PrimarySuffix PrimarySuffix() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null, t2=null;
        boolean justNT;
    if (jj_2_49(2)) {
      t1 = jj_consume_token(DOT);
      t2 = jj_consume_token(THIS);
                {if (true) return(new Lang.ThisSuf().setParms(t2at(t1), t2at(t2)));}
    } else if (jj_2_50(2)) {
      t1 = jj_consume_token(DOT);
      nt1 = AllocationExpression();
                {if (true) return(new Lang.AllocSuf().setParms(t2at(t1), nt1));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        t1 = jj_consume_token(LBRACKET);
        nt1 = Expression();
        t2 = jj_consume_token(RBRACKET);
                {if (true) return(new Lang.ExprSuf().setParms(t2at(t1), nt1, t2at(t2)));}
        break;
      case DOT:
        t1 = jj_consume_token(DOT);
        nt1 = QName();
                {if (true) return(new Lang.QNameSuf().setParms(t2at(t1), nt1));}
        break;
      case LPAREN:
        nt1 = Arguments();
                {if (true) return(new Lang.MthCall().setParms(nt1));}
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Literal Literal() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t1 = jj_consume_token(INTEGER_LITERAL);
                {if (true) return(new Lang.IntLit().setParms(t2at(t1)));}
      break;
    case FLOATING_POINT_LITERAL:
      t1 = jj_consume_token(FLOATING_POINT_LITERAL);
                {if (true) return(new Lang.FPLit().setParms(t2at(t1)));}
      break;
    case CHARACTER_LITERAL:
      t1 = jj_consume_token(CHARACTER_LITERAL);
                {if (true) return(new Lang.CharLit().setParms(t2at(t1)));}
      break;
    case STRING_LITERAL:
      t1 = jj_consume_token(STRING_LITERAL);
                {if (true) return(new Lang.StrLit().setParms(t2at(t1)));}
      break;
    case FALSE:
    case TRUE:
      nt1 = BooleanLiteral();
          {if (true) return((Lang.Literal) nt1);}
      break;
    case NULL:
      nt1 = NullLiteral();
          {if (true) return((Lang.Literal) nt1);}
      break;
    default:
      jj_la1[74] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.BooleanLiteral BooleanLiteral() throws ParseException {
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t1 = jj_consume_token(TRUE);
                {if (true) return(new Lang.True().setParms(t2at(t1)));}
      break;
    case FALSE:
      t1 = jj_consume_token(FALSE);
                {if (true) return(new Lang.False().setParms(t2at(t1)));}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.NullLiteral NullLiteral() throws ParseException {
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(NULL);
                {if (true) return(new Lang.Null().setParms(t2at(t1)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Arguments Arguments() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = AST_ArgList();
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RPAREN);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.Args().setParms(t2at(t1), ont1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_ArgList AST_ArgList() throws ParseException {
        Lang.AST_ArgList list = new Lang.AST_ArgList();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = Expression();
                  list.add(new Lang.AST_ArgListElem().setParms(null, nt1));
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_25;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = Expression();
                  list.add(new Lang.AST_ArgListElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AllocationExpression AllocationExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    if (jj_2_51(2)) {
      t1 = jj_consume_token(NEW);
      nt1 = PrimitiveType();
      nt2 = ArrayDimsAndInits();
                {if (true) return(new Lang.PrimAllocExpr().setParms(t2at(t1), nt1, nt2));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t1 = jj_consume_token(NEW);
        nt1 = AST_QualifiedName();
        nt2 = AllocExprChoices();
                {if (true) return(new Lang.ObjAllocExpr().setParms(t2at(t1), nt1, nt2));}
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AllocExprChoices AllocExprChoices() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      nt1 = ArrayDimsAndInits();
          {if (true) return((Lang.AllocExprChoices) nt1);}
      break;
    case LPAREN:
      nt1 = Arguments();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        nt2 = ClassBody();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.AnonClass().setParms(nt1, ont2));}
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ArrayDimsAndInits ArrayDimsAndInits() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    if (jj_2_53(2)) {
      nt1 = ExprDims();
      if (jj_2_52(2)) {
        nt2 = Dims();
      } else {
        ;
      }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.ArrDim1().setParms(nt1, ont2));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        nt1 = Dims();
        nt2 = AST_ArrayInit();
                {if (true) return(new Lang.ArrDim2().setParms(nt1, nt2));}
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ExprDims ExprDims() throws ParseException {
        Lang.ExprDims list = new Lang.ExprDims();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_26:
    while (true) {
      nt1 = ExDimBody();
                                         list.add(new Lang.ExprDimsElem().setParms(nt1));
      if (jj_2_54(2)) {
        ;
      } else {
        break label_26;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ExDimBody ExDimBody() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(LBRACKET);
    nt1 = Expression();
    t2 = jj_consume_token(RBRACKET);
                {if (true) return(new Lang.ExDimBod().setParms(t2at(t1), nt1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Statement Statement() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    if (jj_2_55(2147483647)) {
      nt1 = LabeledStatement();
          {if (true) return((Lang.Statement) nt1);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        nt1 = Block();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case SEMICOLON:
        nt1 = EmptyStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case SWITCH:
        nt1 = SwitchStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case IF:
        nt1 = IfStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case WHILE:
        nt1 = WhileStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case DO:
        nt1 = DoStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case FOR:
        nt1 = ForStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case BREAK:
        nt1 = BreakStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case CONTINUE:
        nt1 = ContinueStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case RETURN:
        nt1 = ReturnStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case THROW:
        nt1 = ThrowStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case SYNCHRONIZED:
        nt1 = SynchronizedStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case TRY:
        nt1 = TryStatement();
          {if (true) return((Lang.Statement) nt1);}
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case LPAREN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        nt1 = AST_Exp();
        t1 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.ExprStmt().setParms(nt1, t2at(t1)));}
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.LabeledStatement LabeledStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = QName();
    t1 = jj_consume_token(COLON);
    nt2 = Statement();
                {if (true) return(new Lang.LabeledStmt().setParms(nt1, t2at(t1), nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Block Block() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CHAR:
    case CLASS:
    case CONTINUE:
    case DO:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case IF:
    case INT:
    case INTERFACE:
    case LONG:
    case NEW:
    case NULL:
    case RETURN:
    case SHORT:
    case SUPER:
    case SWITCH:
    case SYNCHRONIZED:
    case THIS:
    case THROW:
    case TRUE:
    case TRY:
    case VOID:
    case WHILE:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = AST_Stmt();
      break;
    default:
      jj_la1[83] = jj_gen;
      ;
    }
    t2 = jj_consume_token(RBRACE);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.BlockC().setParms(t2at(t1), ont1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_Stmt AST_Stmt() throws ParseException {
        Lang.AST_Stmt list = new Lang.AST_Stmt();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_27:
    while (true) {
      nt1 = BlockStatement();
                                 list.add(new Lang.AST_StmtElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case LPAREN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_27;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.BlockStatement BlockStatement() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    if (jj_2_56(2147483647)) {
      nt1 = LocalVariableDeclaration();
      t1 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.BlockStmt().setParms(nt1, t2at(t1)));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case IF:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
      case LPAREN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        nt1 = Statement();
          {if (true) return((Lang.BlockStatement) nt1);}
        break;
      case CLASS:
        nt1 = UnmodifiedClassDeclaration();
                {if (true) return(new Lang.BlkClassDcl().setParms(nt1));}
        break;
      case INTERFACE:
        nt1 = UnmodifiedInterfaceDeclaration();
                {if (true) return(new Lang.BlkInterDcl().setParms(nt1));}
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.LocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        Lang.AstOptToken ot1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      t1 = jj_consume_token(FINAL);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    nt1 = AST_TypeName();
    nt2 = AST_VarDecl();
                ot1 = new Lang.AstOptToken().setParms(t2at(t1));
                {if (true) return(new Lang.LocalVarDecl().setParms(ot1, nt1, nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.EmptyStatement EmptyStatement() throws ParseException {
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.Empty().setParms(t2at(t1)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_ExpStmt AST_ExpStmt() throws ParseException {
        Lang.AST_ExpStmt list = new Lang.AST_ExpStmt();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = StatementExpression();
                  list.add(new Lang.AST_ExpStmtElem().setParms(null, nt1));
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[87] = jj_gen;
        break label_28;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = StatementExpression();
                  list.add(new Lang.AST_ExpStmtElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.StatementExpression StatementExpression() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      nt1 = PreIncrementExpression();
                {if (true) return(new Lang.PIExpr().setParms(nt1));}
      break;
    case DECR:
      nt1 = PreDecrementExpression();
                {if (true) return(new Lang.PDExpr().setParms(nt1));}
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        nt2 = StmtExprChoices();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.PEStmtExpr().setParms(nt1, ont2));}
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.StmtExprChoices StmtExprChoices() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INCR:
      t1 = jj_consume_token(INCR);
                {if (true) return(new Lang.PlusPlus().setParms(t2at(t1)));}
      break;
    case DECR:
      t1 = jj_consume_token(DECR);
                {if (true) return(new Lang.MinusMinus().setParms(t2at(t1)));}
      break;
    case ASSIGN:
    case PLUSASSIGN:
    case MINUSASSIGN:
    case STARASSIGN:
    case SLASHASSIGN:
    case ANDASSIGN:
    case ORASSIGN:
    case XORASSIGN:
    case REMASSIGN:
    case LSHIFTASSIGN:
    case RSIGNEDSHIFTASSIGN:
    case RUNSIGNEDSHIFTASSIGN:
      nt1 = AssignmentOperator();
      nt2 = Expression();
                {if (true) return(new Lang.AssnExpr().setParms(nt1, nt2));}
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.SwitchStatement SwitchStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        Token t1=null, t2=null, t3=null, t4=null, t5=null;
        boolean justNT;
    t1 = jj_consume_token(SWITCH);
    t2 = jj_consume_token(LPAREN);
    nt1 = Expression();
    t3 = jj_consume_token(RPAREN);
    t4 = jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
    case _DEFAULT:
      nt2 = AST_SwitchEntry();
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
    t5 = jj_consume_token(RBRACE);
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.SwitchStmt().setParms(t2at(t1), t2at(t2), nt1, t2at(t3), t2at(t4), ont2, t2at(t5)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_SwitchEntry AST_SwitchEntry() throws ParseException {
        Lang.AST_SwitchEntry list = new Lang.AST_SwitchEntry();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_29:
    while (true) {
      nt1 = SwitchEntryBody();
                                  list.add(new Lang.AST_SwitchEntryElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[92] = jj_gen;
        break label_29;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.SwitchEntryBody SwitchEntryBody() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Lang.AstOptNode ont1=null, ont2=null;
        boolean justNT;
    nt1 = SwitchLabel();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BREAK:
    case BYTE:
    case CHAR:
    case CLASS:
    case CONTINUE:
    case DO:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case FOR:
    case IF:
    case INT:
    case INTERFACE:
    case LONG:
    case NEW:
    case NULL:
    case RETURN:
    case SHORT:
    case SUPER:
    case SWITCH:
    case SYNCHRONIZED:
    case THIS:
    case THROW:
    case TRUE:
    case TRY:
    case VOID:
    case WHILE:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt2 = AST_Stmt();
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                {if (true) return(new Lang.SEBod().setParms(nt1, ont2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.SwitchLabel SwitchLabel() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null, t2=null;
        boolean justNT;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      t1 = jj_consume_token(CASE);
      nt1 = Expression();
      t2 = jj_consume_token(COLON);
                {if (true) return(new Lang.CaseLabel().setParms(t2at(t1), nt1, t2at(t2)));}
      break;
    case _DEFAULT:
      t1 = jj_consume_token(_DEFAULT);
      t2 = jj_consume_token(COLON);
                {if (true) return(new Lang.DefLabel().setParms(t2at(t1), t2at(t2)));}
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.IfStatement IfStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    t1 = jj_consume_token(IF);
    t2 = jj_consume_token(LPAREN);
    nt1 = Expression();
    t3 = jj_consume_token(RPAREN);
    nt2 = Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      nt3 = ElseClause();
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.IfStmt().setParms(t2at(t1), t2at(t2), nt1, t2at(t3), nt2, ont3));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ElseClause ElseClause() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(ELSE);
    nt1 = Statement();
                {if (true) return(new Lang.ElseClauseC().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.WhileStatement WhileStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    t1 = jj_consume_token(WHILE);
    t2 = jj_consume_token(LPAREN);
    nt1 = Expression();
    t3 = jj_consume_token(RPAREN);
    nt2 = Statement();
                {if (true) return(new Lang.WhileStm().setParms(t2at(t1), t2at(t2), nt1, t2at(t3), nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.DoStatement DoStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null, t2=null, t3=null, t4=null, t5=null;
        boolean justNT;
    t1 = jj_consume_token(DO);
    nt1 = Statement();
    t2 = jj_consume_token(WHILE);
    t3 = jj_consume_token(LPAREN);
    nt2 = Expression();
    t4 = jj_consume_token(RPAREN);
    t5 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.DoWhileStm().setParms(t2at(t1), nt1, t2at(t2), t2at(t3), nt2, t2at(t4), t2at(t5)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ForStatement ForStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null, nt4=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null, ont4=null;
        Token t1=null, t2=null, t3=null, t4=null, t5=null;
        boolean justNT;
    t1 = jj_consume_token(FOR);
    t2 = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INCR:
    case DECR:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = ForInit();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    t3 = jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt2 = Expression();
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    t4 = jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case INCR:
    case DECR:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt3 = ForUpdate();
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    t5 = jj_consume_token(RPAREN);
    nt4 = Statement();
                ont1 = new Lang.AstOptNode().setParms(nt1);
                ont2 = new Lang.AstOptNode().setParms(nt2);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.ForStmt().setParms(t2at(t1), t2at(t2), ont1, t2at(t3), ont2, t2at(t4), ont3, t2at(t5), nt4));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ForInit ForInit() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    if (jj_2_57(2147483647)) {
      nt1 = LocalVariableDeclaration();
          {if (true) return((Lang.ForInit) nt1);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INCR:
      case DECR:
      case LPAREN:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
        nt1 = StatementExpressionList();
                {if (true) return(new Lang.FIExprList().setParms(nt1));}
        break;
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public Lang.StatementExpressionList StatementExpressionList() throws ParseException {
        Lang.StatementExpressionList list = new Lang.StatementExpressionList();
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null;
        boolean justNT;
    nt1 = StatementExpression();
                  list.add(new Lang.StatementExpressionListElem().setParms(null, nt1));
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_30;
      }
      t1 = jj_consume_token(COMMA);
      nt2 = StatementExpression();
                  list.add(new Lang.StatementExpressionListElem().setParms(t2at(t1), nt2));
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ForUpdate ForUpdate() throws ParseException {
        Lang.AstNode nt1=null;
        boolean justNT;
    nt1 = StatementExpressionList();
                {if (true) return(new Lang.StmExprList().setParms(nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.BreakStatement BreakStatement() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(BREAK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      nt1 = QName();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    t2 = jj_consume_token(SEMICOLON);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.BreakStm().setParms(t2at(t1), ont1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ContinueStatement ContinueStatement() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(CONTINUE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      nt1 = QName();
      break;
    default:
      jj_la1[102] = jj_gen;
      ;
    }
    t2 = jj_consume_token(SEMICOLON);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.ContinueStm().setParms(t2at(t1), ont1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ReturnStatement ReturnStatement() throws ParseException {
        Lang.AstNode nt1=null;
        Lang.AstOptNode ont1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case INT:
    case LONG:
    case NEW:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
      nt1 = Expression();
      break;
    default:
      jj_la1[103] = jj_gen;
      ;
    }
    t2 = jj_consume_token(SEMICOLON);
                ont1 = new Lang.AstOptNode().setParms(nt1);
                {if (true) return(new Lang.ReturnStm().setParms(t2at(t1), ont1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.ThrowStatement ThrowStatement() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null, t2=null;
        boolean justNT;
    t1 = jj_consume_token(THROW);
    nt1 = Expression();
    t2 = jj_consume_token(SEMICOLON);
                {if (true) return(new Lang.ThrowStm().setParms(t2at(t1), nt1, t2at(t2)));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.SynchronizedStatement SynchronizedStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    t1 = jj_consume_token(SYNCHRONIZED);
    t2 = jj_consume_token(LPAREN);
    nt1 = Expression();
    t3 = jj_consume_token(RPAREN);
    nt2 = Block();
                {if (true) return(new Lang.SyncStmt().setParms(t2at(t1), t2at(t2), nt1, t2at(t3), nt2));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.TryStatement TryStatement() throws ParseException {
        Lang.AstNode nt1=null, nt2=null, nt3=null;
        Lang.AstOptNode ont1=null, ont2=null, ont3=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(TRY);
    nt1 = Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      nt2 = AST_Catches();
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      nt3 = Finally();
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
                ont2 = new Lang.AstOptNode().setParms(nt2);
                ont3 = new Lang.AstOptNode().setParms(nt3);
                {if (true) return(new Lang.TryStmt().setParms(t2at(t1), nt1, ont2, ont3));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Finally Finally() throws ParseException {
        Lang.AstNode nt1=null;
        Token t1=null;
        boolean justNT;
    t1 = jj_consume_token(FINALLY);
    nt1 = Block();
                {if (true) return(new Lang.FinallyC().setParms(t2at(t1), nt1));}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.AST_Catches AST_Catches() throws ParseException {
        Lang.AST_Catches list = new Lang.AST_Catches();
        Lang.AstNode nt1=null;
        boolean justNT;
    label_31:
    while (true) {
      nt1 = Catch();
                        list.add(new Lang.AST_CatchesElem().setParms(nt1));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
        ;
        break;
      default:
        jj_la1[106] = jj_gen;
        break label_31;
      }
    }
                  {if (true) return(list);}
    throw new Error("Missing return statement in function");
  }

  static final public Lang.Catch Catch() throws ParseException {
        Lang.AstNode nt1=null, nt2=null;
        Token t1=null, t2=null, t3=null;
        boolean justNT;
    t1 = jj_consume_token(CATCH);
    t2 = jj_consume_token(LPAREN);
    nt1 = FormalParameter();
    t3 = jj_consume_token(RPAREN);
    nt2 = Block();
                {if (true) return(new Lang.CatchStmt().setParms(t2at(t1), t2at(t2), nt1, t2at(t3), nt2));}
    throw new Error("Missing return statement in function");
  }

  static final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  static final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  static final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  static final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  static final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  static final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  static final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  static final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  static final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  static final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  static final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_11();
    jj_save(10, xla);
    return retval;
  }

  static final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_12();
    jj_save(11, xla);
    return retval;
  }

  static final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_13();
    jj_save(12, xla);
    return retval;
  }

  static final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_14();
    jj_save(13, xla);
    return retval;
  }

  static final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_15();
    jj_save(14, xla);
    return retval;
  }

  static final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_16();
    jj_save(15, xla);
    return retval;
  }

  static final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_17();
    jj_save(16, xla);
    return retval;
  }

  static final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_18();
    jj_save(17, xla);
    return retval;
  }

  static final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_19();
    jj_save(18, xla);
    return retval;
  }

  static final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_20();
    jj_save(19, xla);
    return retval;
  }

  static final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_21();
    jj_save(20, xla);
    return retval;
  }

  static final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_22();
    jj_save(21, xla);
    return retval;
  }

  static final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_23();
    jj_save(22, xla);
    return retval;
  }

  static final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_24();
    jj_save(23, xla);
    return retval;
  }

  static final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_25();
    jj_save(24, xla);
    return retval;
  }

  static final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_26();
    jj_save(25, xla);
    return retval;
  }

  static final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_27();
    jj_save(26, xla);
    return retval;
  }

  static final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_28();
    jj_save(27, xla);
    return retval;
  }

  static final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_29();
    jj_save(28, xla);
    return retval;
  }

  static final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_30();
    jj_save(29, xla);
    return retval;
  }

  static final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_31();
    jj_save(30, xla);
    return retval;
  }

  static final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_32();
    jj_save(31, xla);
    return retval;
  }

  static final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_33();
    jj_save(32, xla);
    return retval;
  }

  static final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_34();
    jj_save(33, xla);
    return retval;
  }

  static final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_35();
    jj_save(34, xla);
    return retval;
  }

  static final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_36();
    jj_save(35, xla);
    return retval;
  }

  static final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_37();
    jj_save(36, xla);
    return retval;
  }

  static final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_38();
    jj_save(37, xla);
    return retval;
  }

  static final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_39();
    jj_save(38, xla);
    return retval;
  }

  static final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_40();
    jj_save(39, xla);
    return retval;
  }

  static final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_41();
    jj_save(40, xla);
    return retval;
  }

  static final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_42();
    jj_save(41, xla);
    return retval;
  }

  static final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_43();
    jj_save(42, xla);
    return retval;
  }

  static final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_44();
    jj_save(43, xla);
    return retval;
  }

  static final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_45();
    jj_save(44, xla);
    return retval;
  }

  static final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_46();
    jj_save(45, xla);
    return retval;
  }

  static final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_47();
    jj_save(46, xla);
    return retval;
  }

  static final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_48();
    jj_save(47, xla);
    return retval;
  }

  static final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_49();
    jj_save(48, xla);
    return retval;
  }

  static final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_50();
    jj_save(49, xla);
    return retval;
  }

  static final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_51();
    jj_save(50, xla);
    return retval;
  }

  static final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_52();
    jj_save(51, xla);
    return retval;
  }

  static final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_53();
    jj_save(52, xla);
    return retval;
  }

  static final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_54();
    jj_save(53, xla);
    return retval;
  }

  static final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_55();
    jj_save(54, xla);
    return retval;
  }

  static final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_56();
    jj_save(55, xla);
    return retval;
  }

  static final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_57();
    jj_save(56, xla);
    return retval;
  }

  static final private boolean jj_3R_320() {
    if (jj_3R_326()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_301() {
    if (jj_3R_313()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_314() {
    Token xsp;
    if (jj_3R_320()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_320()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_78() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_52() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_59() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_313() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_317()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_54() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_77() {
    Token xsp;
    if (jj_3_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_29() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_58() {
    Token xsp;
    if (jj_3_29()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_264() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_267()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_268() {
    if (jj_3R_269()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_229() {
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_302()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_111() {
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_262() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_53() {
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_26() {
    if (jj_3R_56()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_287() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_229()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_57() {
    if (jj_scan_token(XOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_111()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_266() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_265() {
    if (jj_3R_262()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_27() {
    if (jj_3R_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_56() {
    Token xsp;
    if (jj_3_27()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_141() {
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_263()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_51() {
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_262()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_24() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_88() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_87() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_110() {
    if (jj_3R_111()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_179() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_146() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_86() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_55() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_110()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_286() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_94() {
    if (jj_3R_146()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_281() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_228()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_6() {
    if (jj_3R_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_85() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_25() {
    if (jj_3R_55()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_35() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_54() {
    Token xsp;
    if (jj_3_25()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_45() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_34() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_280() {
    if (jj_3R_285()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_279() {
    if (jj_3R_284()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_278() {
    if (jj_3R_283()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_22() {
    if (jj_3R_52()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_277() {
    if (jj_3R_282()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_109() {
    if (jj_3R_110()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_223() {
    if (jj_scan_token(NULL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_276() {
    if (jj_3R_281()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_2() {
    if (jj_3R_33()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_274() {
    if (jj_3R_275()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_53() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_231() {
    if (jj_scan_token(FALSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_273() {
    Token xsp;
    if (jj_3R_274()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_230() {
    if (jj_scan_token(TRUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_270() {
    if (jj_3R_273()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_300() {
    if (jj_3R_312()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_23() {
    if (jj_3R_53()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_52() {
    Token xsp;
    if (jj_3_23()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_269() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_215() {
    if (jj_3R_223()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_214() {
    if (jj_3R_222()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_20() {
    if (jj_3R_50()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_213() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_212() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_108() {
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_211() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_312() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_317()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_204() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_210() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_299() {
    if (jj_3R_311()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_19() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_107()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_51() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_311() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_140() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_139() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_21() {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_50() {
    Token xsp;
    if (jj_3_21()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_138() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_50() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_76()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_228() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_269()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_49() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_147() {
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_48() {
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_203() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_178() {
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_202() {
    if (jj_scan_token(NATIVE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_177() {
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_201() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_107() {
    if (jj_3R_147()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_176() {
    if (jj_3R_76()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_175() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_200() {
    if (jj_scan_token(TRANSIENT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_46() {
    if (jj_3R_74()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_174() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_199() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_173() {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_198() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_106() {
    if (jj_scan_token(ORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_172() {
    if (jj_3R_204()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_197() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_105() {
    if (jj_scan_token(XORASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_196() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_104() {
    if (jj_scan_token(ANDASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_195() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_47() {
    if (jj_3R_75()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_103() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_74() {
    Token xsp;
    if (jj_3_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_47()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_194() {
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_102() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_101() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_340() {
    if (jj_3R_346()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_144() {
    if (jj_3R_171()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_100() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_18() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_84() {
    Token xsp;
    if (jj_3R_144()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_144()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_355() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_93() {
    if (jj_3R_145()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_99() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_98() {
    if (jj_scan_token(REMASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_45() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_97() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_44() {
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_351() {
    if (jj_3R_355()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_345() {
    Token xsp;
    if (jj_3R_351()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_96() {
    if (jj_scan_token(STARASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_225() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_95() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_339() {
    if (jj_3R_345()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_224() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_346() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_261() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_137() {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_136() {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_260() {
    if (jj_scan_token(TRY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_49() {
    if (jj_3R_107()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_292() {
    if (jj_3R_170()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_217() {
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_322() {
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_259() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_190() {
    if (jj_3R_204()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_189() {
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_323() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_322()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_338() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_317() {
    if (jj_3R_322()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_323()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_188() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_258() {
    if (jj_scan_token(THROW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_187() {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_186() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_185() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_337() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_47() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_257() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_184() {
    if (jj_scan_token(BANG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_183() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_17() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_43() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_37() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_256() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_336() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_126() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_168()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_335() {
    if (jj_3R_344()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_125() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_42() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_135() {
    if (jj_scan_token(VOID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_41() {
    if (jj_3R_71()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_255() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_12() {
    if (jj_3R_43()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_134() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_133() {
    if (jj_scan_token(FLOAT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_208() {
    if (jj_3R_217()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_132() {
    if (jj_scan_token(LONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_291() {
    if (jj_3R_43()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_207() {
    if (jj_3R_216()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_131() {
    if (jj_scan_token(INT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_206() {
    if (jj_scan_token(BANG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_344() {
    if (jj_3R_350()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_16() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_130() {
    if (jj_scan_token(SHORT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_205() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_334() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_129() {
    if (jj_scan_token(BYTE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_128() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_354() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_353()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_15() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_350() {
    if (jj_3R_353()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) {
    jj_scanpos = xsp;
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_127() {
    if (jj_scan_token(BOOLEAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_181() {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_80() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_290() {
    if (jj_3R_304()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_116() {
    if (jj_3R_37()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_349() {
    if (jj_3R_350()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_333() {
    if (jj_3R_343()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_180() {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_348() {
    if (jj_3R_226()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_115() {
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_192() {
    if (jj_scan_token(RELATIVE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_191() {
    if (jj_3R_171()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_167() {
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_82() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_166() {
    if (jj_3R_181()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_165() {
    if (jj_3R_180()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_254() {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_334()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_332() {
    if (jj_3R_342()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_164() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_142() {
    if (jj_3R_169()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_163() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_289() {
    if (jj_3R_303()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_81() {
    Token xsp;
    if (jj_3R_142()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_44() {
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_253() {
    if (jj_scan_token(DO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_162() {
    if (jj_scan_token(REM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_161() {
    if (jj_scan_token(SLASH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_14() {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_13() {
    if (jj_3R_44()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_160() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_39() {
    if (jj_3R_69()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_252() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SUPER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_91() {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_70() {
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_342() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_288() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_306() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_40() {
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_69() {
    Token xsp;
    if (jj_3_40()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_40()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_288()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_290()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_291()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_251() {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_32() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_331() {
    if (jj_3R_341()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_321() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LAYER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_122() {
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_315() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_318()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_357() {
    if (jj_3R_170()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_362() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_361() {
    if (jj_scan_token(CASE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_356() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_37() {
    if (jj_3R_67()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_159() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_305() {
    if (jj_3R_303()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_295() {
    if (jj_3R_304()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_316() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_158() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_303() {
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_316()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_352() {
    if (jj_3R_356()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_68() {
    if (jj_3R_121()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_347() {
    if (jj_3R_352()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_294() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_341() {
    Token xsp;
    if (jj_3R_347()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_38() {
    if (jj_3R_68()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_67() {
    Token xsp;
    if (jj_3_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_308() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_250() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_307() {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_120() {
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_363() {
    if (jj_3R_364()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_367() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_304() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_317()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_366() {
    if (jj_scan_token(DECR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_157() {
    if (jj_scan_token(RUNSIGNEDSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_365() {
    if (jj_scan_token(INCR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_364() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_156() {
    if (jj_scan_token(RSIGNEDSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_35() {
    if (jj_3R_65()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_155() {
    if (jj_scan_token(LSHIFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_293() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_284() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_294()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_295()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_296()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_272() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_360() {
    if (jj_3R_93()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_363()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_66() {
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_359() {
    if (jj_3R_181()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_358() {
    if (jj_3R_180()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_353() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_267() {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_36() {
    if (jj_3R_66()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_65() {
    Token xsp;
    if (jj_3_36()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_271() {
    if (jj_3R_267()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_90() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_118() {
    if (jj_3R_120()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_89() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_272()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_249() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_154() {
    if (jj_scan_token(GE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_153() {
    if (jj_scan_token(LE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_41() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_152() {
    if (jj_scan_token(GT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_232() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_226() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_298()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_151() {
    if (jj_scan_token(LT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_33() {
    if (jj_3R_63()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_324() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_10() {
    if (jj_3R_41()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_46() {
    Token xsp;
    if (jj_3_10()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_32() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_64() {
    if (jj_3R_117()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_118()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_79() {
    if (jj_scan_token(FINAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_221() {
    if (jj_3R_229()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_220() {
    if (jj_3R_228()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_319() {
    if (jj_3R_325()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_318() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_219() {
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_34() {
    if (jj_3R_64()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_63() {
    Token xsp;
    if (jj_3_34()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_218() {
    if (jj_3R_226()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_325() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_193() {
    if (jj_3R_209()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_170() {
    Token xsp;
    if (jj_3R_193()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_150() {
    if (jj_3R_118()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_143() {
    if (jj_3R_170()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_309() {
    if (jj_3R_318()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_83() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_114() {
    if (jj_3R_150()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_310() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_309()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_298() {
    if (jj_3R_309()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_310()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3R_248() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_227()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_30() {
    if (jj_3R_60()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_149() {
    if (jj_scan_token(NE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_148() {
    if (jj_scan_token(EQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_297() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_247() {
    if (jj_3R_261()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_297()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_298()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_246() {
    if (jj_3R_260()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_245() {
    if (jj_3R_259()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_61() {
    if (jj_3R_113()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_114()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_244() {
    if (jj_3R_258()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_302() {
    if (jj_3R_314()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_243() {
    if (jj_3R_257()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_9() {
    if (jj_3R_38()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_242() {
    if (jj_3R_256()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_40() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_241() {
    if (jj_3R_255()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_240() {
    if (jj_3R_254()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_330() {
    if (jj_3R_285()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_39() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_31() {
    if (jj_3R_61()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_239() {
    if (jj_3R_253()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_60() {
    Token xsp;
    if (jj_3_31()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  static final private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_238() {
    if (jj_3R_252()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_55() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_237() {
    if (jj_3R_251()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_329() {
    if (jj_3R_284()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_236() {
    if (jj_3R_250()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_235() {
    if (jj_3R_249()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_328() {
    if (jj_3R_282()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_234() {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_327() {
    if (jj_3R_281()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_227() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_233() {
    if (jj_3R_248()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3_28() {
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static final private boolean jj_3R_112() {
    if (jj_3R_114()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  static private boolean jj_initialized_once = false;
  static public BaliParserTokenManager token_source;
  static ASCII_CharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static public boolean lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[107];
  static final private int[] jj_la1_0 = {0x0,0x0,0x8100000,0x8000,0x180000,0x4a00000,0x180000,0x4a00000,0x0,0x40000,0x180000,0x180000,0x0,0x0,0x0,0x8100000,0x0,0x100000,0x8100000,0x8000000,0x100000,0x100000,0x0,0x0,0xcb00000,0xcb00000,0x4b00000,0x100000,0x100000,0x100000,0x100000,0x0,0xcb00000,0xcb00000,0x4b00000,0x100000,0x0,0x0,0x0,0x4a00000,0x0,0x4a00000,0x100000,0x0,0x0,0x4a00000,0x0,0x0,0x0,0x100000,0x4a00000,0x0,0xace00000,0x4a00000,0x0,0x4a00000,0x4a00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4a00000,0x0,0x4a00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4a00000,0x0,0x0,0x0,0x0,0x0,0xa4e00000,0xace00000,0xace00000,0xace00000,0x0,0x0,0x0,0x4a00000,0x0,0x41000000,0x41000000,0xace00000,0x41000000,0x0,0x4a00000,0x4a00000,0x4a00000,0x4a00000,0x0,0x0,0x0,0x4a00000,0x2000000,0x0,0x2000000,};
  static final private int[] jj_la1_1 = {0x80000,0x800,0x12714010,0x0,0x12710010,0x100a051,0x12710010,0x100a051,0x4,0x0,0x12710010,0x12710010,0x0,0x0,0x800,0x12714010,0x0,0x12710010,0x12714010,0x4000,0x12710010,0x12710010,0x4,0x400,0x1371e051,0x1371e051,0x1371a051,0x12710010,0x12710010,0x12710010,0x12710010,0x4,0x1371e051,0x1371e051,0x1371a051,0x12710010,0x0,0x0,0x0,0x2506a049,0x0,0x2506a049,0x12710010,0x80000000,0x0,0x100a051,0x0,0x0,0x10,0x12710010,0x100a051,0x80000000,0x7d86e2d9,0x2506a049,0x2000000,0x100a041,0x100a041,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2506a049,0x0,0x2506a049,0x0,0x24060008,0x0,0x0,0x24060008,0x0,0x0,0x40008,0x8,0x2506a049,0x0,0x20000,0x0,0x0,0x0,0x7d86a2c9,0x7d86e2d9,0x7d86e2d9,0x7d86e2c9,0x10,0x0,0x0,0x2506a049,0x0,0x0,0x0,0x7d86e2d9,0x0,0x2,0x2506a059,0x2506a049,0x2506a049,0x2506a049,0x0,0x0,0x0,0x2506a049,0x0,0x20,0x0,};
  static final private int[] jj_la1_2 = {0x0,0x0,0x411,0x0,0x11,0x8,0x11,0x8,0x0,0x0,0x11,0x11,0x800,0x1000,0x0,0x411,0x1000,0x11,0x411,0x0,0x11,0x11,0x0,0x0,0x59,0x59,0x19,0x11,0x11,0x11,0x11,0x0,0x19,0x19,0x19,0x11,0x800,0x2000,0x100,0x3c03004a,0x800,0x3c03004a,0x11,0x0,0x440,0x8,0x100,0x800,0x0,0x11,0x8,0x0,0x3c03046e,0xa,0x0,0x8,0x8,0x800,0x2000,0x900000,0x60c000,0x0,0x30000000,0xc0000000,0x3c03000a,0x30000,0xa,0x0,0x30002,0xc000000,0x0,0x2,0x0,0x1100,0x2,0x2,0x3c03000a,0x800,0x0,0x40,0x100,0x100,0x3c03046e,0x3c03046e,0x3c03046e,0x3c03046e,0x0,0x800,0xc002000,0xc00000a,0xc002000,0x0,0x0,0x3c03046e,0x0,0x0,0xc00000a,0x3c03000a,0xc00000a,0xc00000a,0x800,0x0,0x0,0x3c03000a,0x0,0x0,0x0,};
  static final private int[] jj_la1_3 = {0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x1d140000,0x0,0x1d140000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x1d140000,0x1d140000,0x0,0x10000000,0x0,0x0,0x3ff80,0x0,0x0,0x70,0x0,0x8,0x1d140000,0x0,0x1d140000,0x40000,0x1d140000,0x0,0x40000,0xd140000,0x10000000,0x40000,0xd100000,0x0,0x1d140000,0x0,0x0,0x0,0x40000,0x0,0x1d140000,0x1d140000,0x1d140000,0x1d140000,0x0,0x0,0x3ff80,0x1d140000,0x3ff80,0x0,0x0,0x1d140000,0x0,0x0,0x1d140000,0x1d140000,0x1d140000,0x1d140000,0x0,0x10000000,0x10000000,0x1d140000,0x0,0x0,0x0,};
  static final private JJCalls[] jj_2_rtns = new JJCalls[57];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  public BaliParser(java.io.InputStream stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new BaliParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BaliParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new ASCII_CharStream(stream, 1, 1);
    token_source = new BaliParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BaliParser(BaliParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BaliParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 107; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  static final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[126];
    for (int i = 0; i < 126; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 107; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 126; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

  static final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 57; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  static final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
