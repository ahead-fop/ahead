layer SmXHarvest;

import java.util.*;
import Jakarta.util.FixDosOutputStream;
import Jakarta.util.Util;
import java.io.*;

/**  
  * UnmodifiedTypeExtension
  *    : STATE_MACHINE QName [ ImplementsClause ] SmClassBody :: UmodSmExt
  *;
  * @layer<SmXHarvest>
  */
    
public refines class UmodSmExt {
    StateMachineDocJTS _state;
    
    public void execute() {

        // State name
        String state_name = ( ( AstToken )arg[0].tok[0] ).tokenName();
        _state = new  StateMachineDocJTS( state_name );

        Super().execute();
            
        // [ImplementsClase]
        AstNode   e1 = arg[0].arg[0];
           
        // If there are implemented interfaces then add them
        if ( e1!=null ) {
                         
            // @debug
            System.out.println( "class of impl => " + e1.className() );

            List implementsInterfaces = 
                            ( ( ImplClause )e1 ).implementedInterfaces;
            _state.setImplementsList( implementsInterfaces );

            // @debug
            System.out.println( "Aqui es donde truena" );

        }
        else // otherwise it is empty (same as above here)
                {
            _state.setImplementsList( new LinkedList() );
        }
                   
        // SmClassBody           
        // Sets the methods for the class
        SmClassDecl sdc = ( SmClassDecl )arg[2];
        _state.setRootClauseName( sdc.rootClauseName );
        _state.setParameters( sdc.parameters );
        _state.setNoTransitionClauseClasses( sdc.noTransitionClauseClasses );
        _state.setOtherwiseClauseClasses( sdc.otherwiseClauseClasses );
        _state.setStatesClauseStates( sdc.statesClauseStates );
          
        // ESList information
        _state.setExitTransitions( sdc.ExitTransitions );
        _state.setEnterTransitions( sdc.EnterTransitions );
        _state.setPrepareTransitions( sdc.PrepareTransitions );
        _state.setTestTransitions( sdc.TestTransitions );
        _state.setActionTransitions( sdc.ActionTransitions );
        _state.setTransitionDeclarations( sdc.TransitionDeclarations );
        _state.setOtherwiseTransitions( sdc.OtherwiseTransitions );
         
        // AST_FieldDecl information
        _state.setMethods( sdc.listOfMethods );
        _state.setInnerClasses( sdc.listOfInnerClasses );
        _state.setConstructors( sdc.listOfConstructors );
        _state.setFields( sdc.listOfFields );
        _state.setStates( sdc.listOfStates );
           
        // $TEqn.ClassDocJTS theClass = sdc._sd_class;
        // theClass.setName("state" +(_state.name()).trim());
        //_state.setClassBody(theClass);
           
        // *********** Comment Processing ******************************
        String comment = ( ( AstToken ) tok[0] ).white_space;
        CommentJedi stateComment = 
                CommentParser.ParseComment( _state, comment );
        _state.setComment( stateComment );

    } // of execute

    // Returns the pointer to the state machine
    public  StateMachineDocJTS getDocObject() {
        return _state;
    }

}
