layer JavaAPI;

import java.io.*;
import java.util.*;

// @pending -> eventualy the first 3 imports should be removed, once
// the API is changed so that no dependencies of Sun Doc's exit
/**
* com.sun.javadoc.*,
*        sun.tools.java.*,
*        com.sun.tools.javadoc.*,
*        
* @layer<JavaAPI>
*/

 /** JEDI project
 * ClassDocJTS.java
 * University of Texas at Austin
 * Department of Computer Sciences
 * Product-line Architecture Research Group
 * @author Roberto E. Lopez-Herrejon
 * @version 1.1
 * @since November 25, 2002
*/

public class ClassDocJTS extends  ProgramElementDocJTS {

    // ********************************************************************
    // ********************************************************************
    // ** Interface methods that have to be implemented
 
    /** Current implementation returns the value of the variable, initialized 
     * to false. Return true if this class is abstract.
     * @layer<JavaAPI>
     */
    public boolean isAbstract() {
        return isAbstract;
    }

    /** Returns true if the class is Serializable or not. 
    * That is, it implements java.io.Serializable interface. 
    * Current implementation only checks for "Serializable" but it has to
    * check for interfaces derived from it, or java.io.Serializable .
    * Note: Externalizable extends Serializable. So this case has to be 
    * considered as well.
    * Return true if this class implements java.io.Serializable. 
    * Since java.io.Externalizable extends java.io.Serializable, 
    * Externalizable objects are also Serializable.  ???
    * @layer<JavaAPI>
    */
    public boolean isSerializable() 
    {
        boolean serializable = false;
        for ( int i=0; i< interfaces.length ; i++ )
            if ( interfaces[i].name().equals( "Serializable" ) )
                        {
                serializable = true;
                break;
            }
        return serializable;
    }
  
    /** Returns true if the class is Externalizable or not.
     * That is, it implements java.io.Externalizable interface.
     * Current implementation only checks for "Externalizable" but it has to
     * consider interfaces derived from it, and java.io.Externalizable. ???
     * @layer<JavaAPI>
     */
    public boolean isExternalizable() 
    {
        boolean externalizable = false;
        for ( int i=0; i<interfaces.length ; i++ )
            {
            if ( interfaces[i].name().equals( "Externalizable" ) )
                            {
                externalizable = true;
                break;
            }
        }
        return externalizable;
    }

    /** Returns the methods that are serialized. 
     * Current implementation returns only an empty array of 
     * MethodDocJTS objects.
     * @layer<JavaAPI>
     */
    public  MethodDocJTS serializationMethods()[] 
    {
        return new  MethodDocJTS[0];
    }

    /** Return the Serializable fields of class.
     * Return either a list of default fields documented by serial tag
     * or return a single FieldDoc for serialPersistentField member. 
     * There should be a serialField tag for each Serializable field 
     * defined by an ObjectStreamField array component of 
     * serialPersistentField ???
     * @see definesSerializableFields(), SerialFieldTag
     * @pending -> how should this be handled?
     * @layer<JavaAPI>
     */
    public  FieldDocJTS serializableFields()[] 
    {
        LinkedList theFields = new LinkedList();
        for( int i=0; i< fields.size(); i++ )
            {
            FieldDocJTS theField = ( FieldDocJTS )fields.get( i );
            if ( theField.isStatic() == false && 
                            theField.isTransient() == false )
                theFields.add( theField );
        }
        
        FieldDocJTS[] arrayFields = 
                             new  FieldDocJTS[theFields.size()];
        for( int i=0; i< theFields.size(); i++ )
            arrayFields[i] = ( FieldDocJTS )theFields.get( i );
        return arrayFields;
    }

    /** I assume that it would return true if there are a serializable field in
     * the class but it seems that that is not the case.
     * Current implementation returns the value of the variable that it is 
     * initialized to false.
     * Return true if Serializable fields are explicitly defined with the 
     * special class member serialPersistentFields ???
     * @see serializableFields(), SerialFieldTag
     * @layer<JavaAPI>
     */
    public boolean definesSerializableFields()
    {
        return defineSerializableFields;
    }

    /** Return the superclass of this class.
     * @return the ClassDoc for the superclass of this class, 
     * null if there is no superclass.
     * @layer<JavaAPI>
     */
    public  ClassDocJTS superclass() {
        return superclass;
    }

    /** I assume it returns true if the class is a subclass of this class.
     * Current implementation returns always false.
     * I assume that it looksup somewhere to see if it is present.
     * Test whether this class is a subclass of the specified class.
     * @param cd - the candidate superclass.
     * @return true if cd is a superclass of this class ???
     * @layer<JavaAPI>
     */
    public boolean subclassOf( ClassDocJTS c ) {
        return false;
    }

    /** Return interfaces implemented by this class or interfaces extended 
     * by this interface. Includes only directly declared interfaces, 
     * not inherited interfaces.
     * @return An array of ClassDoc representing the interfaces. 
     * Return an empty array if there are no interfaces.
     * @layer<JavaAPI>
     */
    public  ClassDocJTS interfaces()[] 
    {
        ClassDocJTS[] arrayInterfaces = 
                new  ClassDocJTS[theInterfaces.size()];
        for( int i=0; i< theInterfaces.size(); i++ )
            {
            arrayInterfaces[i] = ( ClassDocJTS )theInterfaces.get( i );
        }
        return arrayInterfaces;
    }

    /** Returns an array of FieldDocJTS objects, which are the fields 
     * of the class.
     * @return an array of FieldDoc for representing the visible fields 
     * in this class.
     * @layer<JavaAPI>
     */
    public  FieldDocJTS fields()[] 
    {
        FieldDocJTS[] arrayFields = new  FieldDocJTS[fields.size()];
        for( int i=0; i< fields.size(); i++ )
            {
            arrayFields[i] = ( FieldDocJTS )fields.get( i );
        }
        return arrayFields;
    }

    /** Returns an array of MethodDocJTS objects, which are the methods 
     * of the class.
     * Return methods in class.
     * @return an array of MethodDoc for representing the visible 
     * methods in this class. Does not include constructors.
     * @layer<JavaAPI>
     */
    public  MethodDocJTS methods()[] 
    {
        MethodDocJTS[] arrayMethods = 
                  new  MethodDocJTS[methods.size()];
        for( int i=0; i< methods.size(); i++ )
            {
            arrayMethods[i] = ( MethodDocJTS )methods.get( i );
        }
        return arrayMethods;
    }

    /** Returns an array of ConstructorDocJTS objects, which are the 
     * constructors of the class.
     * Note : by default it has an empty public constructor if there 
     * are not any in the source code.
     * @return an array of ConstructorDoc for representing the visible 
     * constructors in this class.
     * @layer<JavaAPI>
     */
    public  ConstructorDocJTS constructors()[] 
    {
        ConstructorDocJTS[] arrayConstructors = 
            new  ConstructorDocJTS[constructors.size()];
        for( int i=0; i< constructors.size(); i++ ) {
            arrayConstructors[i] = ( ConstructorDocJTS )constructors.get( i );
        }
        return arrayConstructors;
    }

    /** Returns an array of $TEqn.ClassDocJTS objects, which are the 
     * innerclasses and innerinterfaces of this class.
     * @return an array of ClassDoc for representing the visible classes 
     * defined in this class. Anonymous and local classes are not included.
     * @layer<JavaAPI>
     */
    public  ClassDocJTS innerClasses()[] 
    {
        ClassDocJTS[] arrayInnerClasses = 
             new  ClassDocJTS[innerClasses.size()];
        for( int i=0; i< innerClasses.size(); i++ )
            arrayInnerClasses[i] = ( ClassDocJTS )innerClasses.get( i );
        return arrayInnerClasses;
    }

    /** Find a class within the context of this class. 
     * Search order: qualified name, in this class (inner), in this package, 
     * in the class imports, in the package imports. 
     * Return the ClassDoc if found, null if not found ???
     * @layer<JavaAPI>
     */
    public  ClassDocJTS findClass( String classname ) {
        return null;
    }

    /** Current implementation returns empty array.
     * Get the list of classes declared as imported. 
     * These are called "single-type-import declarations" in the JLS.
     * @return an array of ClassDoc representing the imported classes ???
     * @layer<JavaAPI>
     */
    public  ClassDocJTS importedClasses()[] 
    {
        return new  ClassDocJTS[0];
    }

    /** Current implementation returns empty array.
     * Get the list of packages declared as imported. These are 
     * called "type-import-on-demand declarations" in the JLS.
     * @return an array of PackageDoc representing the imported packages ???
     * @layer<JavaAPI>
     */
    public  PackageDocJTS importedPackages()[] 
    {
        return new  PackageDocJTS[0];
    }

    /** Current implementation returns empty string ???
     * @layer<JavaAPI>
     */
    public String dimension() {
        return "";
    }

    /** What is the difference with thisClassDocJST ???
     * Current implementation returns this.
     * @layer<JavaAPI>
     */
    public  ClassDocJTS asClassDoc() {
        return null;
    }

    /**************** End of interface implementation ****************
     * @layer<JavaAPI>
     */
    
    /**************** Implementation members **************************/
    
    // *** Field Summary 
    /** Originally, final java.lang.String name; 
     * The name of the class */
    String name;
                             
    /** Contains the reference to the superclass. 
     * @layer<JavaAPI>
     */
    ClassDocJTS superclass;

    /** Contains the reference to the containing package. 
     * @layer<JavaAPI>
     */
    PackageDocJTS containingPackage;

    /** Contains a list of FieldDocJTS objects, which are the fields 
     * of the class. 
     * @layer<JavaAPI>
     */
    List fields;

    /** Contains a list of MethodDocJTS objects, which are the methods of 
     * the class. 
     * @layer<JavaAPI>
     */
    List methods;

    /** Contains a list of ConstructorDocJTS objects, which are 
     * the constructors of the class
     * @layer<JavaAPI>
     */
    List constructors;

    /** Contains a list of ClassDocJTS objects, which are the 
     * innerclasses of the class. 
     * @layer<JavaAPI>
     */
    List innerClasses;

    /** Contains an array of ClassDocJTS objects, which are the interfaces 
     * that are implemented in the class. 
     * @layer<JavaAPI>
     */
    ClassDocJTS interfaces[];

    /** Contains a list of ClassDocJTS objects, which are the classes 
     * imported by the class. 
     * @layer<JavaAPI>
     */
    List importedClasses;

    /** Contains a list of PackageDocJTS objects, which are the list 
     * of imported packages of the class. 
     * @layer<JavaAPI>
     */
    List importedPackages;

    /** Variable that indicates if the class defines serialiable fields.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean defineSerializableFields = false;

    /** Variable that indicates if the object is a class or not.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean isClass = false;

    /** Variable that indicates if the class is an ordinary class.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean isOrdinaryClass = true;

    /** Variable that indicates if a class is an interface or not.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean isInterface = false;
    
    /** Variable that indicates if a class is an exception or not.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean isException = false;

    /** Variable that indicates if a class is an error or not.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean isError = false;

    /** Variable that indicates if a class is abstract or not.
     * Initial value : false
     * @layer<JavaAPI>
     */
    boolean isAbstract = false;

    /** List that holds the interfaces implemented by the class
     * @layer<JavaAPI>
     */
    List theInterfaces;

    /** List that holds the implemented interfaces ?????
     * Current implementation : uncertain what this means ????
     * @layer<JavaAPI>
     */
    List implementedInterfaces;

    // **** Constructors
    //public ClassDocJTS() { 
    //    // $TEqn.ClassDocJTS.ClassDocJTSConstructor();
    //}    
    
    /** Added: Constructor. 
     * @layer<JavaAPI>
     */
    // public ClassDocJTS(String _name)
    // {
    //    name = _name;
    //    // $TEqn.ClassDocJTS.ClassDocJTSConstructor(name);
    // }

    // Auxiliary methods to avoid constructor inheritance problem
    public static  ClassDocJTS ClassDocJTSFactory() {
        return new  ClassDocJTS();
    }

    // public static $TEqn.ClassDocJTS ClassDocJTSFactory(String name) {  
    //    return new $TEqn.ClassDocJTS(name);
    // } 

    public void ClassDocJTSConstructor() {}
    public void ClassDocJTSConstructor( String _name ) {
        this.name  = _name;
    }

    // *** Method summary
    /** Returns true if this is the definition of a Class.
     * @layer<JavaAPI>
     */
    public boolean isClass() {
        return isClass;
    }

    /** Returns true if this is a definition of an Ordinary class.
     * The question is : What is an ordinary class?
     * Current implementation returns the value of the variable which is
     * initialized to true.
     * @layer<JavaAPI>
     */
    public boolean isOrdinaryClass() {
        return isOrdinaryClass;
    }

    /** Returns true if this is a definition of an interface.
     * @layer<JavaAPI>
     */
    public boolean isInterface() {
        return isInterface;
    }

    /** The Class is an exception class ???
     * @layer<JavaAPI>
     */
    public boolean isException() {
        return isException;
    }

    /** Current implementation initialized to false ???
     * @layer<JavaAPI>
     */
    public boolean isError() {
        return isError;
    }

    /** Returns the reference to the package that contains this class.
     * @layer<JavaAPI>
     */
    public  PackageDocJTS containingPackage()
    {
        return containingPackage;
    }

    /** Returns the name of the class.
     * Current implementation does not add prefix for innerclasses ???
     * @layer<JavaAPI>
     */
    public String name() {
        return name;
    }

    /** Returns the name of the type of the Class.
     * Seems to be the same as name() but I dont know.
     * Current implementation just returns the name ???
     * @layer<JavaAPI>
     */
    public String typeName() {
        return name;
    }

    /** Returns the qualifiedName of the class.
     * Seems to include the name of the package as well.
     * Current implementation returns the name ???
     * @layer<JavaAPI>
     */
    public String qualifiedName() {
        return name;
    }

    /** Returns the qualifiedType name of the class.
     * Seems to be the same as qualifiedName.
     * Current implementation returns the name.
     * @layer<JavaAPI>
     */
    public String qualifiedTypeName() {
        return name;
    }

    /** Returns the list of implemented interfaces ???
     * @layer<JavaAPI>
     */
    public List implementedInterfaces() 
    {
        return implementedInterfaces;
    }

    /** Returns an string with the modifiers of the class.
     * Current implementation prepends abstract, if present, to the
     * modifiers method in the superclass. 
     * @layer<JavaAPI>
     */
    public String modifiers()
    {
        String output = "";
        if ( isAbstract )
            output =" abstract ";
        output = output + super.modifiers();
        return output;
    }

    /** Looks for a method in this class
     * Not part of the interface.
     * @layer<JavaAPI>
     */
    public  MethodDocJTS findMethod( String name, String[] list ) 
    {
        for ( int i=0; i< methods.size(); i++ )
            {
            MethodDocJTS theMethod = 
                      ( MethodDocJTS ) methods.get( i );
                        
            // if not same name, forget about it
            if ( ! ( theMethod.name() ).equals( name ) )
                continue;
                        
            // Compare the type of the parameters
            boolean match = theMethod.equalParameterTypes( list );
                        
            // If we find it return the reference
            if ( match )
                return theMethod;
                
        }
        
        return null;
    }

    /**Looks for a constructor name and its parameters, and returns 
     * the correspondent reference if any.
     * Not part of the interface.
     * @layer<JavaAPI>
     */
    public  ConstructorDocJTS findConstructor( String name, String[] list ) 
    {
        for ( int i=0; i< constructors.size(); i++ )
            {
            ConstructorDocJTS theConstructor = 
                            ( ConstructorDocJTS ) constructors.get( i );
                        
            // if not same name, forget about it
            if ( ! ( theConstructor.name() ).equals( name ) )
                continue;
                        
            // Compare the type of the parameters
            boolean match = theConstructor.equalParameterTypes( list );
                        
            // If we find it return the reference
            if ( match )
                return theConstructor;
                
        }
        
        return null;
    }

    /** Looks for a given field in this class.
     * @layer<JavaAPI>
     */
    public  FieldDocJTS findField( String fieldname ) 
    {
        for ( int i=0; i< fields.size(); i++ )
            {
            FieldDocJTS theField = ( FieldDocJTS )fields.get( i );
            if ( theField.name().compareTo( fieldname ) == 0 )
                return theField;
        }
        
        return null;
    }

    /** Sets the innerClasses list.
     * @layer<JavaAPI>
     */
    public void setInnerClasses( List _innerClasses )
    {
        innerClasses = _innerClasses;
    }

    /** Sets the superClass object of theclass.
     * @layer<JavaAPI>
     */
    public void setSuperClass( ClassDocJTS _superclass )
    {
        superclass = _superclass;
    }

    /** Sets the methods list.
     * @layer<JavaAPI>
     */
    public void setMethods( List _methods )
    {
        methods = _methods;
    }

    /** Sets the name of the class.
     * @layer<JavaAPI>
     */
    public void setName( String _name )
    {
        name = _name;
    }

    /** Sets the list of constructors.
     * @layer<JavaAPI>
     */
    public void setConstructors( List _constructors )
    {
        constructors = _constructors;
    }

    /** Sets the list of fields.
     * @layer<JavaAPI>
     */
    public void setFields( List _fields )
    {
        fields = _fields;
    }

    /** Sets the list of implemented interfaces.
     * @layer<JavaAPI>
     */
    public void setInterfaces( List _interfaces )
    {
        theInterfaces = _interfaces;
        interfaces = new  ClassDocJTS[theInterfaces.size()];
        for( int i=0; i< theInterfaces.size(); i++ )
            interfaces[i] = ( ClassDocJTS ) theInterfaces.get( i );
    }

    /** May be this method is not necessary, until we discover what
     * are implemented interfaces then we will know
     * Current implementation : uncertai what it means ???
     * @layer<JavaAPI>
     */
    public void setImplementedInterfaces( List _implementedInterfaces )
    {
        implementedInterfaces = _implementedInterfaces;
    }

    /** Sets the class isClass variable.
     * @layer<JavaAPI>
     */
    public void setClass( boolean _isClass )
    {
        isClass = _isClass;
    }

    /** Sets the class isOrdinaryClass variable.
     * @layer<JavaAPI>
     */
    public void setOrdinaryClass( boolean _isOrdinaryClass )
    {
        isOrdinaryClass = _isOrdinaryClass;
    }

    /** Sets the class isInterface variable.
     * @layer<JavaAPI>
     */
    public void setInterface( boolean _isInterface )
    {
        isInterface = _isInterface;
    }

    /** Sets this class to be abstract.
     * @layer<JavaAPI>
     */
    public void setAbstract( boolean _isAbstract )
    {
        isAbstract = _isAbstract;
    }

    /** Sets the setDefineSerializableFields variable.
     * @layer<JavaAPI>
     */
    public void setDefineSerializableFields( boolean _defineSerializableFields )
    {
        defineSerializableFields = _defineSerializableFields;
    }

    /** Sets the containingPackage variable.
     * @layer<JavaAPI>
     */
    public void setContainingPackage( PackageDocJTS _containingPackage )
    {
        containingPackage = _containingPackage;
    }

    /** The text that corresponds to the interfaces it implements
     * @layer<JavaAPI>
     */
    public String textInterfaces()
    {
        String text = "";
 
        return text;
    /*    ClassDoc[] theInterfaces = (ClassDoc[])Aclass.interfaces();
    
    if (theInterfaces != null) { 
        for(int i=0; i< theInterfaces.length; i++){
        if (i < theInterfaces.length - 1) { 
            text = text + theInterfaces[i].name() + ","; }
        else { 
            text = text + theInterfaces[i].name() + ""; }
        }
    }
    return text;
    */

    } // the interfaces

}
