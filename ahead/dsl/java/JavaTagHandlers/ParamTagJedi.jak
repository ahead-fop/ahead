layer JavaTagHandlers;

import java.util.Vector;
import Jakarta.util.FixDosOutputStream;
import Jakarta.util.Util;
import java.io.*;
import java.util.*;
import java.util.regex.*;

// **********************************************************************
// **********************************************************************
// **********************************************************************
/** The Tag Handler for Param Tags 
 * @layer<JavaTagHandlers>
 */

public class ParamTagJedi extends AbstractTagJedi {

    // ********* Interface methods that have to be implemented ********

    /** Returns the parameterName variable. 
     * @layer<JavaTagHandlers>
     */
    public String parameterName() {
        return parameterName;
    }

    /** Returns the parameterComment variable. 
     * @layer<JavaTagHandlers>
     */
    public String parameterComment() {
        return parameterComment;
    }

    /**************** Implementation members *************************
     * @layer<JavaTagHandlers>
     */

    /** The name of the parameter. */
    String parameterName;

    /** The text that contains the comment of the parameter. 
     * @layer<JavaTagHandlers>
     */
    String parameterComment;

    /** Constructor.    
     * @layer<JavaTagHandlers>
     */
    public ParamTagJedi( DocJTS _holder, String _text, String _name )
    {
        holder = _holder;
        text = _text;
        name = _name;
    }

    /** Default Constructor 
     * @layer<JavaTagHandlers>
     */
    public ParamTagJedi() {
        // @dummy code
        int x=4;
    }

    /** Sets the parameter name. 
     * @layer<JavaTagHandlers>
     */
    public void setParameterName( String _parameterName )
    {
        parameterName = _parameterName;
    }

    /** Sets the parameter comment. 
     * @layer<JavaTagHandlers>
     */
    public void setParameterComment( String _parameterComment )
    {
        parameterComment = _parameterComment;
    }

    /** Method that parses and builds a ParamTag.
     * ParamTag -> @param parameter_name parameter_description
     * @layer<JavaTagHandlers>
     */
    public void parse( DocJTS Document,  CommentJedi comment, 
        String stringTag ) {

        String parameterName = "";
        String parameterDescription = "";
           
        String paramPattern ="(^@param)( +)(\\S*)( *)(.*)";
        Pattern p = Pattern.compile( paramPattern );
        Matcher m = p.matcher( stringTag );
        if ( m.find() ) {
            parameterName = m.group( 3 );
            parameterDescription = m.group( 5 );
        }

        // Parses the description part of the tag.
        DefaultTagJedi tempTag = new  DefaultTagJedi();
        CommentParser.ParseDescription( Document,
            "@dummy " + parameterName + " " + parameterDescription, 
            "@param", tempTag );
           
        // Creates the ParamTag from the parts of tempTag
        ParamTagJedi paramTag = 
               new  ParamTagJedi( Document, tempTag.text(), 
                                            tempTag.name() );
        paramTag.setKind( tempTag.kind() );
        paramTag.setParameterName( parameterName );
        paramTag.setParameterComment( parameterDescription );
        paramTag.setFirstSentenceTags( tempTag.firstSentenceTags() );
        paramTag.setInlineTags( tempTag.inlineTags() );

        // @pending
        // Formely, it created new tags and param arrays everytime a new
        // tag was added, now, it directly adds them in the linked list
        LinkedList paramList = comment.paramTags();
        paramList.add( paramTag );
        comment.setParamTag( paramList ); // @redundant?

        LinkedList tagsList = comment.getTags();
        tagsList.add( paramTag );
        comment.setTags( tagsList ); // @redundant?

    } // of parse

}
