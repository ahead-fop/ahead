layer core;

import java.util.*;
import Jakarta.util.FixDosOutputStream;
import Jakarta.util.Util;
import java.io.*;

/******************** Main class **************************
 * @layer<core>
 */

public refines class Main {
    final static String toolname = $str( $PackName );
    static boolean dumpSymbolTable = false;
    static boolean displayAspect   = false;
    static String targetName       = null;
   
    private static void usage( String err ) {
        System.err.println( "Error: " + err );
        System.err.print( "Usage: java " + toolname + ".Main [options]" );
        System.err.println( " baseFile extensionFile1 extensionFile2 ..." );
        System.err.println( "         -f <filename> name of file to generate" );
        System.err.println( "         -a <layerName> name of layer to generate" );
        System.err.println( "         -s dump symbol table" );
        System.err.println( "         -i do nothing option" );
        System.err.println( "         -e send error messages to System.out" );
        System.exit( 1 );
    }

    public static void main( String args[] ) {
        String fileName   = null;
        String layerName = null;
        boolean errorOut  = false;
        int  argc = args.length;
        int  non_switch_args;
        int  i;
   
        // Step 1: a general routine to pick off command line options
        //         options are removed from command line and
        //         args array is adjusted accordingly.
        //         right now, there are no command-line options
        //         but this code is here for future expansion
      
        non_switch_args = 0;

        for ( i=0; i < argc; i++ ) {

            if ( args[i].charAt( 0 ) != '-' ) {
                args[non_switch_args] = args[i];
                non_switch_args++;
                continue ;
            }
   
            String arg = args [i] ;

            // Switches of form -xxx where xxx is a word:
            //
            if ( arg.equals( "-layer" ) && i + 1 < args.length ) {
                layerName = args [++i] ;
                continue ;
            }

            if ( arg.equals( "-model" ) && i + 1 < args.length ) {
                setModelDirectory( args [++i] ) ;
                continue ;
            }

            if ( arg.equals( "-output" ) && i + 1 < args.length ) {
                fileName = args [++i] ;
                continue ;
            }

            // Switches of form -xxx where each x is a switch character:
            //
            for ( int j=1; j < arg.length(); j++ ) {

                char cur = arg.charAt( j ) ;

                // Simple toggle switches:
                //
                if ( cur == 'e' ) {
                    errorOut= true;
                    continue ;
                }
                if ( cur == 'i' ) {
                    System.err.println( "option is deprecated: " + cur ) ;
                    continue ;
                }
                if ( cur == 's' ) {
                    dumpSymbolTable = true;
                    continue ;
                }

                // Switches with an argument:
                //
                if ( cur != 'a' && cur != 'f' )
                    usage( "unrecognized option: " + cur );

                if ( i + 1 >= args.length )
                    usage( "option requires an argument: " + cur ) ;

                if ( cur == 'a' ) {
                    layerName = args[++i];
                    continue ;
                }
                if ( cur == 'f' ) {
                    fileName = args[++i];
                    continue ;
                }

                usage( "unrecognized option: " + cur );
            }
        }

        if ( non_switch_args == 0 )
            usage( "Must specify at least one input file" );

        if ( getModelDirectory() == null )
            setModelDirectory( null ) ;

        // Step 2: initialize JTSParseTree, and symbol table for this composition

        setBaseURI( null );
        symtab.init();

        JTSParseTree.resetCounters();
        if ( errorOut )
            JTSParseTree.setReportStream( new PrintWriter( System.out ) );
        else
            JTSParseTree.setReportStream( new PrintWriter( System.err ) );
   
        // Step 3: foreach file, parse it, and compose (link)
        //         it together to form an equation.

        JTSParseTree base = null;
        for ( i=0; i<non_switch_args; i++ ) {
            try {
                JTSParseTree ext = new  JTSParseTree( args[i] );
                if ( base == null )
                    base = ext;
                else {

                    // check if a constant is in the middle of an equation
                                // if so, generate an error and exit.  Technically, this
                                // isn't an error, but the idea of completely overriding
                                // something seems wrong...

                    if ( ext.isConstant() )
                        AstNode.fatalError( "Shouldn't have constant " + ext.getAspectName()
                                                        + " in the middle of an equation" );

                    // DRC composition algorithms are "backwards"
                    // they start at the *top* of an equation or
                    // layer stack and proceed downwards.  Typical
                    // composition algorithms start at the bottom
                    // and work their way up.

                    ext.compose( base );
                    base = ext;
                }
            }
            catch ( ParseException pe ) {
                AstNode.fatalError( pe, "failed to parse" );
            }
            catch ( Exception e ) {
                AstNode.fatalError( e, "failed to compose" );
            }
        }

        // Step 4: general clean-up duties

        if ( layerName != null )
            base.setAspectName( layerName );

        if ( dumpSymbolTable )
            symtab.display();

        if ( !base.isComplete() ) {
            common.warning( "composed equation is incomplete: non-null requirements present\n" +
                     base.completeness() );
        }

        if ( base.errorCount() == 0 ) {
            // we had no errors, maybe some warnings

            base.print2file( fileName );
        }
        else {
            AstNode.toolReport( base.errorCountString() );
        }
    } //end main()
}
