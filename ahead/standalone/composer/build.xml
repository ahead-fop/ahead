<?xml version="1.0"?>

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<project name="Composer" default="all">

 <description>
 Builds the hierarchical composition driver.
 (C) 2002-2003 Jacob Neal Sarvela and The University of Texas at Austin

 The Composer is responsible for recursively descending hierarchies of units,
 finding those with matching signatures to compose.  The primitive units are
 composed with type-specific compositions which may driven by external tools.
 </description>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- Project-level properties define build parameters.	       -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- The "project" properties are used to generate other property  -->
    <!-- names and to define substitutions into project documents.     -->
    <!-- Definitions are taken from the first place where found in the -->
    <!-- following list:  (A) Command line; (B) "build.properties"     -->
    <!-- in the base directory; (C) The definitions in this file.      -->
    <!-- The command-line may be specified by a higher-level build.    -->
    <!--							       -->
    <!-- PROJECT PARAMETERS (should be defined in this file):	       -->
    <!-- * project.name ....... generate property and file names;      -->
    <!-- * project.Name ....... capitalized name for documentation;    -->
    <!-- * project.owner ...... copyright owner of this code;	       -->
    <!-- * project.title ...... capitalized title for documentation;   -->
    <!-- * project.version .... the release, state and patch level.    -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <property name="project.name"	value="composer"/>
    <property name="project.Name"	value="Composer"/>

    <property
        name="project.owner"
        value="The University of Texas at Austin"/>

    <property
        name="project.title"
	value="Command-Line Composition Tool"/>

    <property name="project.version"	value="v2003.03.11"/>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <property name="dir.build"		location="${basedir}/build"/>
    <property name="dir.build.api"	location="${dir.build}/api"/>
    <property name="dir.build.classes"	location="${dir.build}/classes"/>
    <property name="dir.build.test"	location="${dir.build}/test"/>

    <property
        name="jar.build"
	location="${dir.build}/${project.name}.jar"/>

    <property name="dir.source"		location="${basedir}"/>

    <property name="build.debug"	value="true"/>
    <property name="build.deprecation"	value="false"/>
    <property name="build.optimize"	value="false"/>

    <property name="test.debug"		value="true"/>
    <property name="test.deprecation"	value="${build.deprecation}"/>
    <property name="test.optimize"	value="false"/>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <property name="dir.tools"		location=".."/>
    <property name="dir.lib"		location="${dir.tools}/lib"/>

    <property
        name="jar.balicomposer"
        location="${dir.lib}/balicomposer.jar"/>

    <property name="jar.drc"		   location="${dir.lib}/drc.jar"/>
    <property name="jar.jakarta"	   location="${dir.lib}/jakarta.jar"/>
    <property name="jar.jampack"  	location="${dir.lib}/jampack.jar"/>
    <property name="jar.mixin"		location="${dir.lib}/mixin.jar"/>
    <property name="jar.mix"	   	location="${dir.lib}/mix.jar"/>
    <property name="jar.velocity"	location="${dir.lib}/velocity.jar"/>
    <property name="jar.xc"	    	location="${dir.lib}/xc.jar"/>
    <property name="jar.xak"		   location="${dir.lib}/xak.jar"/>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <path id="external.class.path.id">
        <pathelement location="${jar.balicomposer}"/>
        <pathelement location="${jar.drc}"/>
        <pathelement location="${jar.jakarta}"/>
        <pathelement location="${jar.jampack}"/>
        <pathelement location="${jar.mixin}"/>
        <pathelement location="${jar.mix}"/>
        <pathelement location="${jar.velocity}"/>
        <pathelement location="${jar.xc}"/>
        <pathelement location="${jar.xak}"/>
    </path>

    <property name="external.class.path" refid="external.class.path.id"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "all" target is shorthand to re-compile from scratch.     -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target
        name="all"
        depends="jar,javadoc,test"
        description="Equivalent to jar, javadoc, and test"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "clean" target removes generated files *other* than those -->
    <!-- generated to define the build configuration, if any.	       -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target
        name="clean"
        depends="initialize"
        description="Deletes generated files (e.g., class files)">

        <patternset id="clean.patterns">
            <exclude name="**/CVS/**"/>

            <include name="**/*~"/>
            <include name="**/#*#"/>
            <include name="**/.#*"/>
            <include name="**/%*%"/>
            <include name="**/*.bak"/>
            <include name="**/*.BAK"/>
            <include name="**/*.pyc"/>
            <include name="**/*.pyo"/>
            <include name="**/core"/>
        </patternset>

	<delete includeEmptyDirs="true" quiet="true">

	    <fileset dir="${dir.build}"/>

            <fileset defaultexcludes="no" dir=".">
                <include name="**/*.log"/>
                <include name="**/*.class"/>
                <patternset refid="clean.patterns"/>
            </fileset>

	</delete>

        <!-- Apparently the "delete" task can't delete symbol links, -->
        <!-- so the following deletes the directory containing them: -->

        <exec executable="rm">
	    <arg value="--force"/>
	    <arg value="--recursive"/>
	    <arg value="--"/>
            <arg file="${dir.build}"/>
        </exec>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "compile" target compiles all nested Java source files,   -->
    <!-- storing the generated class files into another directory.     -->
    <!-- It also copies any resource files to the same directory.      -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target
        name="compile"
        depends="prepare"
        description="Compiles Java source files to class files in build/">

        <mkdir dir="${dir.build.classes}"/>

	<javac
	    classpath="${external.class.path}"
	    debug="${build.debug}"
	    deprecation="${build.deprecation}"
            destdir="${dir.build.classes}"
	    optimize="${build.optimize}">

	    <src path="."/>
	    <exclude name="**/*Test.java"/>
	    <include name="**/*.java"/>
	</javac>

	<copy todir="${dir.build.classes}">
	    <fileset dir="." includes="*.properties"/>
	</copy>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "initialize" target calculates a set of initial dynamic build -->
    <!-- properties such as timestamps and copyrights.  It also prints an  -->
    <!-- informative message about the build.                              -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="initialize">

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Create the time stamps for current build:                 -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<tstamp>
	    <format property="initialize.date" pattern="yyyy/MM/dd"/>
	    <format property="initialize.time" pattern="HH:mm:ss"/>
	    <format property="initialize.year" pattern="yyyy"/>
	</tstamp>

	<property
            name="timestamp"
            value="${initialize.date} ${initialize.time}"/>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Calculate range of years to put into copyright notice:    -->
	<!-- * cr.alpha .......	first year source was created;	       -->
	<!-- * cr.omega .......	last year source was modified;	       -->
	<!-- * cr.range .......	range of years for copyright.	       -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<property name="cr.alpha" value="2002"/>
	<property name="cr.owner" value="${project.owner}"/>

	<condition property="cr.range" value="${cr.alpha}">
	    <equals arg1="${cr.alpha}" arg2="${initialize.year}"/>
	</condition>

	<condition property="cr.range" value="${cr.alpha}-${initialize.year}">
            <not>
                <equals arg1="${cr.alpha}" arg2="${initialize.year}"/>
            </not>
        </condition>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- Create copyright messages:                                -->
	<!-- * copyright.base ... text with year(s) and owner;         -->
	<!-- * copyright.html ... for inclusion into HTML documents;   -->
	<!-- * copyright.text ... for inclusion into text documents.   -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<property name="copyright.base" value="${cr.range} ${cr.owner}"/>
	<property name="copyright.html"	value="&#169; ${copyright.base}"/>
	<property name="copyright.text"	value="(C) ${copyright.base}"/>

	<echo level="info" message="${project.title} ${project.version}"/>
	<echo level="info" message="${copyright.text}"/>
	<echo level="info" message=""/>
	<echo level="info" message="Build begins ${timestamp}"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target
        name="jar"
        depends="compile,manifest"
        description="Collects generated class files into a JAR">

        <jar
            basedir="${dir.build.classes}"
	    jarfile="${jar.build}"
	    manifest="${dir.build}/MANIFEST.MF"/>

        <copy flatten="true" todir="${dir.build}">
            <fileset dir="${dir.lib}">
                <include name="balicomposer.jar"/>
                <include name="drc.jar"/>
                <include name="jakarta.jar"/>
                <include name="jampack.jar"/>
                <include name="mixin.jar"/>
                <include name="velocity.jar"/>
                <include name="xak.jar"/>
		<include name="xc.jar"/>
		<include name="mix.jar"/>
            </fileset>
        </copy>

	<echo level="info" message="${jar.build}" taskname="jar"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target
        name="javadoc"
        depends="compile"
        description="Generates API documentation into build/api/">

        <mkdir dir="${dir.build.api}"/>

	<property name="javadoc.api" value="${project.title} API"/>

        <javadoc
	    access="private"
	    author="true"
	    destdir="${dir.build.api}"
	    overview="overview.html"
	    sourcepath=".."
	    use="true"
	    useexternalfile="true"
	    verbose="false"
	    version="true"
	    windowtitle="${javadoc.api}">

	    <bottom>
                <![CDATA[<strong>${copyright.html}</strong>]]>
            </bottom>

	    <classpath>
		<pathelement location="${dir.build.classes}"/>
		<pathelement path="${external.class.path}"/>
	    </classpath>

	    <doctitle>
                <![CDATA[<h1>${javadoc.api}</h1>]]>
            </doctitle>

	    <footer>
	        <![CDATA[<strong>${project.Name} ${project.version}</strong>]]>
            </footer>

	    <header>
	        <![CDATA[<strong>${project.Name} ${project.version}</strong>]]>
            </header>

            <link href="http://java.sun.com/j2se/1.4/docs/api"/>
            <link href="http://jakarta.apache.org/velocity/api/"/>

	    <package name="composer.*"/>

	</javadoc>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="manifest" depends="prepare">

	<manifest file="${dir.build}/MANIFEST.MF">

	    <attribute name="Build-Timestamp"   value="${timestamp}"/>
	    <attribute name="Build-Username"    value="${user.name}"/>
	    <attribute name="Copyright-Notice"  value="${copyright.text}"/>
	    <attribute name="Main-Class"        value="${project.name}.Main"/>

	    <attribute
		name="Class-Path"
		value="file:balicomposer.jar file:drc.jar
		file:jakarta.jar file:jampack.jar file:mixin.jar
		file:velocity.jar file:xc.jar file:mix.jar file:xak.jar"/>

	</manifest>

	<echo
            level="info"
	    message="Manifest ${dir.build}/MANIFEST.MF"
	    taskname="manifest"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target name="prepare" depends="initialize">

	<mkdir dir="${dir.build}"/>
	<mkdir dir="${dir.build.api}"/>
	<mkdir dir="${dir.build.classes}"/>
	<mkdir dir="${dir.build.test}"/>

    </target>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <!-- The "test" target runs all JUnit tests in the test source code.   -->
    <!-- Java code for testing is compiled here since it's not mainstream. -->
    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <target
        name="test"
        depends="test.brief,test.check"
        description="Runs all test cases, generating brief output."/>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Sub-target "test.brief": Runs testcases, generating brief output. -->
    <!-- This target is suitable for use in an interactive environment.    -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <target name="test.brief" depends="test.compile">

	<junit
	    errorProperty="test.failed"
	    failureProperty="test.failed"
	    fork="true"
	    printsummary="true">

            <formatter type="brief"/>
            <jvmarg value="-Xint"/>

	    <classpath>
		<pathelement location="${dir.build.test}"/>
		<pathelement location="${jar.build}"/>
		<pathelement location="${external.class.path}"/>
	    </classpath>

            <batchtest todir="${dir.build.test}">
                <fileset dir="${dir.build.test}" includes="**/*.class"/>
            </batchtest>
        </junit>

	<property
	    name="test.brief.output"
	    location="${dir.build.test}/TEST*.txt"/>

	<echo level="info" message="Details in ${test.brief.output}."/>

    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Sub-target "test.check": Aborts build only if the "test.failed"   -->
    <!-- property is set (this should be set by prior <junit> tasks).      -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <target name="test.check" depends="test.compile" if="test.failed">

	<echo level="info" message="Tests failed" taskname="fail"/>
	<fail message="Tests failed"/>

    </target>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- Sub-target "test.compile": Compiles all *Test.java source files.  -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <target name="test.compile" depends="jar">

    	<javac
	    classpath="${jar.build}"
	    debug="${test.debug}"
	    deprecation="${test.deprecation}"
	    destdir="${dir.build.test}"
	    optimize="${test.optimize}">

	    <src path="${dir.source}"/>
	    <include name="**/*Test.java"/>
	</javac>
	
    </target>

</project>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- Local Variables:                    -->
<!-- mode:                           XML -->
<!-- fill-column:                     79 -->
<!-- sgml-ignore-undefined-elements: nil -->
<!-- sgml-indent-data:                 t -->
<!-- sgml-indent-step:                 4 -->
<!-- End:                                -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
